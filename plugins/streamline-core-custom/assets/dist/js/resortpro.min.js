(function() {
    var app = angular.module("resortpro", ["resortpro.services", "resortpro.filters", "resortpro.property", "resortpro.checkout", "ngMap", "angularPayments"], function($interpolateProvider) {
        $interpolateProvider.startSymbol("{[");
        $interpolateProvider.endSymbol("]}")
    });
    app.config(function($locationProvider,$anchorScrollProvider) {
        $locationProvider.html5Mode({
            enabled: true,
            requireBase: false,
            rewriteLinks: false
        })

        $anchorScrollProvider.disableAutoScrolling();
    });
    angular.element(document).ready(function() {
        angular.bootstrap(document, ["resortpro"])
    })
})();
(function() {
    var mapLoaded = false;
    var app = angular.module("resortpro.checkout", ["resortpro.services", "resortpro.filters", "resortpro.directives", "ngCookies"]);
    app.controller("CheckoutController", ["$scope", "$rootScope", "$sce", "$http", "$window", "$filter", "$location", "Alert", "rpapi", "rpuri", "$cookies", function($scope, $rootScope, $sce, $http, $window, $filter, $location, Alert, rpapi, rpuri, $cookies) {
        $scope.error = false;
        $scope.startDate = $filter("date")(rpuri.getQueryStringParam("sd"), "MM/dd/yyyy");
        $scope.endDate = $filter("date")(rpuri.getQueryStringParam("ed"), "MM/dd/yyyy");
        $scope.unit = rpuri.getQueryStringParam("unit");
        $scope.occupants = rpuri.getQueryStringParam("oc");
        $scope.occupants_small = rpuri.getQueryStringParam("os");
        $scope.pets = rpuri.getQueryStringParam("pets");
        $scope.amenities = [];
        $scope.hasAddOns = false;
        $scope.hasTravelInsurance = false;
        $scope.hasDamageProtection = false;
        $scope.hasCfar = false;
        $scope.protectionError = false;
        $scope.confirmationId = 0;
        $scope.referrer_url = "";
        $scope.pbgEnabled = false;
        $scope.toggleup = false;
        $scope.toggledown = true;
        $scope.optionalItems = "";
        $scope.cookieCheckout = {};
        $scope.cookieConfirmation = {};
        var year = (new Date).getFullYear();
        var range = [];
        range.push(year);
        for (var i = 1; i < 10; i++) {
            range.push(year + i)
        }
        $scope.years = range;
        $scope.stepOneDisabled = true;
        $scope.stepTwoDisabled = true;
        $scope.chkTravelInsurance = false;
        $scope.chkCfar = false;
        $scope.chkTravelInsuranceR = {
            selectedOption: false
        };
        $scope.chkDamageWaiverR = {
            selectedOption: false
        };
        $scope.chkCfarR = {
            selectedOption: false
        };
        $scope.showBtn = true;

        $scope.showload = true;

        $scope.decreaseGuest = function(maxguest) {
           
        }

        $scope.validateStepOne = function(checkout) {
            if (checkout) {
                if (checkout.fname && checkout.lname && checkout.email && checkout.phone) {
                    $scope.stepOneDisabled = false
                } else {
                    $scope.stepOneDisabled = true
                }
            }
        };
        $scope.createCheckoutCookie = function() {
            var now = new Date;
            now.setDate(now.getDate() + 30);
            if ($scope.checkout.fname) {
                $scope.cookieCheckout["fname"] = $scope.checkout.fname
            }
            if ($scope.checkout.lname) {
                $scope.cookieCheckout["lname"] = $scope.checkout.lname
            }
            if ($scope.checkout.email) {
                $scope.cookieCheckout["email"] = $scope.checkout.email
            }
            if ($scope.checkout.phone) {
                $scope.cookieCheckout["phone"] = $scope.checkout.phone
            }
            var res = $cookies.putObject("streamline-checkout-cookie", $scope.cookieCheckout, {
                path: "/",
                expires: now
            })
        };
        $scope.validateStepTwo = function() {
            var travelOk = true;
            var damageOk = true;
            if (($scope.hasTravelInsurance || $scope.hasCfar) && !($scope.chkCfar || $scope.chkTravelInsurance || $scope.chkTravelInsuranceNo)) {
                travelOk = false
            }
            if ($scope.hasDamageProtection && !($scope.chkDamageWaiver || $scope.chkDamageWaiverNo)) {
                damageOk = false
            }
            if (travelOk && damageOk) {
                $scope.stepTwoDisabled = false
            } else {
                $scope.stepTwoDisabled = true
            }
            $scope.getPreReservation()
        };
        $scope.calculateMarkup = function(strPrice) {
            var price = strPrice;
            if (typeof strPrice == "string") {
                price = parseFloat(strPrice.replace("$", "").replace(",", ""))
            }
            if ($rootScope.rateMarkup > 0) {
                var pct = 1 + parseFloat($rootScope.rateMarkup) / 100;
                price = price * pct
            }
            return price
        };
        $scope.toggleCfar = function(feeId) {
            if ($scope.chkCfarR.selectedOption) {
                $scope.chkCfar = true;
                $scope.chkTravelInsuranceNo = false;
                $scope.chkTravelInsurance = false;
                $scope.chkTravelInsuranceR.selectedOption = false
            } else {
                $scope.chkCfar = false
            }
            setTimeout(function() {
                $scope.validateStepTwo()
            }, 100)
        };
        $scope.toggleTravelInsurance = function(feeId) {
            run_waitMe(".price_sticky", "bounce", "Updating price...");
            if ($scope.chkTravelInsuranceR.selectedOption) {
                $scope.chkTravelInsurance = true;
                $scope.chkCfar = false;
                $scope.chkCfarR.selectedOption = false;
                $scope.chkTravelInsuranceNo = false
            } else {
                $scope.chkTravelInsurance = false
            }
            setTimeout(function() {
                $scope.validateStepTwo()
                $scope.toggleup = false;
                $scope.toggledown = true;
            }, 100)
        };
        $scope.acceptCfar = function() {
            if ($scope.chkCfar) {
                $scope.chkTravelInsurance = false;
                $scope.chkTravelInsuranceNo = false;
                $scope.chkCfarR.selectedOption = true;
                $scope.chkTravelInsuranceR.selectedOption = false
            } else {
                $scope.chkCfarR.selectedOption = false
            }
            setTimeout(function() {
                $scope.validateStepTwo()
            }, 100)
        };
        $scope.acceptTravelInsurance = function() {
            run_waitMe(".price_sticky", "bounce", "Updating price...");
            if ($scope.chkTravelInsurance) {
                $scope.chkCfar = false;
                $scope.chkTravelInsuranceNo = false;
                $scope.chkTravelInsuranceR.selectedOption = true;
                $scope.chkCfarR.selectedOption = false

            } else {
                $scope.chkTravelInsuranceR.selectedOption = false
            }
            setTimeout(function() {
                $scope.validateStepTwo()
                $scope.toggleup = false;
                $scope.toggledown = true;
            }, 100)
        };

        $scope.toggleTax = function() {
           
           if( jQuery('.show_tax').find('.fa').attr("class") == "fa fa-chevron-circle-down ng-scope"){

                jQuery('.breakdown-taxes-hidden').css("display","table-row");
                $scope.toggleup = true;
                $scope.toggledown = false;
           }else{
                jQuery('.breakdown-taxes-hidden').css("display","none");
                $scope.toggleup = false;
                $scope.toggledown = true;
           }
        }

        $scope.rejectTravelInsurance = function() {
            run_waitMe(".price_sticky", "bounce", "Updating price...");
            if ($scope.chkTravelInsuranceNo) {
                $scope.chkTravelInsurance = false;
                $scope.chkTravelInsuranceR.selectedOption = false;
                $scope.chkCfar = false;
                $scope.chkCfarR.selectedOption = false
            }
            setTimeout(function() {
                $scope.validateStepTwo()
                $scope.toggleup = false;
                $scope.toggledown = true;
            }, 100)
        };
        $scope.getAmenitiesWithRates = function() {};
        $scope.addToReservation = function() {
            var foundAddon = false;
            jQuery(".addOn:checked").each(function(index) {
                if (jQuery(this).prop("checked")) {
                    foundAddon = true;
                    jQuery("#optional-fee-" + jQuery(this).val()).prop("checked", true);
                    var qty = parseInt(jQuery("#qty-optional-fee-" + jQuery(this).val()).val());
                    if (!isNaN(qty)) {
                        jQuery("#label-qty-" + jQuery(this).val()).html(" x " + jQuery("#qty-optional-fee-" + jQuery(this).val()).val())
                    } else {
                        jQuery("#label-qty-" + jQuery(this).val()).html("")
                    }
                }
            });
            if (foundAddon) {
                $scope.getPreReservation();
                jQuery("#modalAmenities").modal("hide")
            } else {
                alert("You have not selected any add-ons.");
                return false
            }
        };
        $scope.toggleDamageWaiver = function(feeId) {
            run_waitMe(".price_sticky", "bounce", "Updating price...");
            if ($scope.chkDamageWaiverR.selectedOption) {
                $scope.chkDamageWaiver = true;
                $scope.chkDamageWaiverNo = false
            } else {
                $scope.chkDamageWaiver = false
            }
            setTimeout(function() {
                $scope.validateStepTwo()
            }, 100)
        };
        $scope.acceptDamageWaiver = function() {
            run_waitMe(".price_sticky", "bounce", "Updating price...");
            if ($scope.chkDamageWaiver) {
                $scope.chkDamageWaiverNo = false;
                $scope.chkDamageWaiverR.selectedOption = true
            } else {
                $scope.chkDamageWaiverR.selectedOption = false
            }
            setTimeout(function() {
                $scope.validateStepTwo()
            }, 100)
        };

        $scope.toggleAdditionalFees = function() {
              run_waitMe(".price_sticky", "bounce", "Updating price...");
              setTimeout(function() {
                $scope.getPreReservation()
              }, 100)
        }

        $scope.goToStepTwoA = function() {
        	jQuery("form[name='formStep1']")[0].reset();
            $scope.getStates();
            if (typeof jQuery("#btn-step1").attr("disabled") == "undefined") {
                jQuery("#step0").hide();
                jQuery("#step1").show();
                jQuery("#step2").hide();
                jQuery("#step3").hide();
            }
        };
        $scope.rejectDamageWaiver = function() {
            run_waitMe(".price_sticky", "bounce", "Updating price...");
            if ($scope.chkDamageWaiverNo) {
                $scope.chkDamageWaiver = false;
                $scope.chkDamageWaiverR.selectedOption = false
            }
            setTimeout(function() {
                $scope.validateStepTwo()
            }, 100)
        };
        $scope.goToStepOne = function() {
            jQuery('.main_cnt_step_2').removeAttr('style');
            jQuery("#step2").hide();
            jQuery("#step1").show();
            jQuery("#step3").hide();
            if ($rootScope.checkout_layout_option == "2") {
                if ($scope.reservationDetails.optional_fees.length > 0) {
                    jQuery(".progress-bar").attr("style", "width:33%");
                    jQuery(".r_protection .dot i").removeClass("fa-check");
                    jQuery(".r_protection .dot i").addClass("fa-circle");
                    jQuery(".r_protection .circle").removeClass("primary-button");
                    jQuery(".r_payment .circle").removeClass("primary-button");
                    jQuery(".r_payment .dot i").removeClass("fa-check");
                    jQuery(".r_payment .dot i").addClass("fa-circle")
                } else {
                    jQuery(".r_payment .circle").removeClass("primary-button");
                    jQuery(".r_payment .dot i").removeClass("fa-check");
                    jQuery(".r_payment .dot i").addClass("fa-circle");
                    jQuery(".progress-bar").attr("style", "width:50%")
                }
            }
        };
        $scope.goToStepZero = function() {
            jQuery("#step0").show();
            jQuery("#step1").hide();
            jQuery("#step2").hide();
            jQuery("#step3").hide()
            jQuery('.main_cnt_step_1').removeAttr('style');
        };
        $scope.goToStep2 = function(isPbg) {
            $scope.pbgEnabled = isPbg;
            $scope.createCheckoutCookie();
            if ($scope.formStep1.$valid) {
                if (!$scope.hash && $rootScope.checkoutSettings && $rootScope.checkoutSettings.createLeads == 1 && !$scope.confirmationId > 0) {
                    var params = {
                        not_blocked_request: "yes",
                        startdate: $scope.startDate,
                        enddate: $scope.endDate,
                        occupants: $scope.occupants,
                        occupants_small: $scope.occupants_small,
                        first_name: $scope.checkout.fname,
                        last_name: $scope.checkout.lname,
                        email: $scope.checkout.email,
                        mobile_phone: $scope.checkout.phone,
                        pets: $scope.pets,
                        disable_minimal_days: "yes"
                    };
                    if ($rootScope.bookingSettings && $rootScope.bookingSettings.hearedAboutId > 0) params["hear_about_id"] = $rootScope.bookingSettings.hearedAboutId;
                    if ($scope.referrer_url != "") params["referrer_url"] = $scope.referrer_url;
                    if ($rootScope.roomTypeLogic == 1) {
                        params["use_room_type_logic"] = 1;
                        params["condo_type_id"] = $scope.checkout.condo_type_id;
                        params["location_id"] = $scope.checkout.location_id
                    } else {
                        params["unit_id"] = $scope.unit
                    }
                    params["flags"] = [{
                        flag_id: 2027
                    }];
                    rpapi.getWithParams("MakeReservation", params).success(function(obj) {
                        if (obj.status) {
                            Alert.add(Alert.errorType, obj.status.description)
                        } else {
                            $scope.confirmationId = obj.data.reservation.confirmation_id;
                            $scope.cookieConfirmation["confirmation_id"] = obj.data.reservation.confirmation_id;
                            var now = new Date;
                            now.setDate(now.getDate() + 10);
                            $cookies.putObject("streamline-confirmation-cookie", $scope.cookieConfirmation, {
                                path: "/",
                                expires: now
                            })
                        }
                    })
                }
                if ($scope.reservationDetails.optional_fees.length > 0) {
                    $scope.goToStepTwo();
                    if ($rootScope.checkout_layout_option == "2") {
                        jQuery(".progress-bar").attr("style", "width:66%");
                        jQuery(".r_protection .dot i").removeClass("fa-circle");
                        jQuery(".r_protection .dot i").addClass("fa-check");
                        jQuery(".r_protection .circle").addClass("primary-button")
                    }
                } else {
                    $scope.goToStepThree(true);
                    if ($rootScope.checkout_layout_option == "2") {
                        jQuery(".progress-bar").attr("style", "width:100%");
                        jQuery(".r_protection .dot i").removeClass("fa-circle");
                        jQuery(".r_protection .dot i").addClass("fa-check");
                        jQuery(".r_protection .circle").addClass("primary-button")
                    }
                }
            }
            $scope.getStates()
        };
        $scope.goToStepTwo = function() {
            jQuery("#paymentform")[0].reset();
            jQuery('.main_cnt_step_3').removeAttr('style');
            if ($rootScope.checkout_layout_option == "2") {
                setTimeout(function() {
                    jQuery("#step2").show();
                    jQuery("#step1").hide();
                    jQuery("#step3").hide();
                    jQuery(".progress-bar").attr("style", "width:66%");
                    jQuery(".r_payment .dot i").addClass("fa-circle");
                    jQuery(".r_payment .dot i").removeClass("fa-check");
                    jQuery(".r_payment .circle").removeClass("primary-button");
                    jQuery(".r_confirmation .dot i").addClass("fa-circle");
                    jQuery(".r_confirmation .dot i").removeClass("fa-check");
                    jQuery(".r_confirmation .circle").removeClass("primary-button")
                }, 500)
            } else {
                jQuery("#step2").show();
                jQuery("#step1").hide();
                jQuery("#step3").hide();
            }
            if ($scope.amenities.length > 0 && $rootScope.checkoutSettings.useAddOns == 1) {
                jQuery("#modalAmenities").modal()
            }
        };
        $scope.goToStep3 = function() {
            if (!$scope.stepTwoDisabled) {
                $scope.protectionError = false;
                $scope.goToStepThree($scope.chkDamageWaiverNo);
                if ($scope.pbgEnabled) {
                    //PBG.onReady()
                }
            } else {
                $scope.protectionError = true
            }
        };
        $scope.goToStepThree = function(damageWaiverNo) {
            jQuery(".progress-bar").attr("style", "width:99%");
            jQuery(".r_payment .dot i").removeClass("fa-circle");
            jQuery(".r_payment .dot i").addClass("fa-check");
            jQuery(".r_payment .circle").addClass("primary-button");
            $scope.chkDamageWaiverNo = damageWaiverNo;
            if($rootScope.checkout_layout_option == "2") {
                setTimeout(function() {
                    jQuery("#step3").show();
                    jQuery("#step2").hide();
                    jQuery("#step1").hide()
                }, 500)
            } else {
                jQuery("#step3").show();
                jQuery("#step2").hide();
                jQuery("#step1").hide()
            }
        };
        $scope.validateStep3 = function(checkout) {
            if ($scope.formStep3.$valid) {
                $scope.processCheckout(checkout);
                jQuery(".r_confirmation .dot i").removeClass("fa-circle");
                jQuery(".r_confirmation .dot i").addClass("fa-check");
                jQuery(".r_confirmation .circle").addClass("primary-button");

            }
        };
        $scope.validatePaymentForm = function(checkout) {
            if ($scope.formStep3.$valid) {
                if (parseFloat($scope.checkout.price_balance) < parseFloat($scope.checkout.payment_amount)) {
                    alert("Please enter payment amount lower than the price balance");
                    return false
                }

                run_waitMe("#step3", "bounce", "Processing your request");
                var params = {
                    first_name: checkout.fname,
                    last_name: checkout.lname,
                    email: checkout.email,
                    address: checkout.address,
                    address2: checkout.address2,
                    city: checkout.city,
                    zip: checkout.postal_code,
                    state_name: checkout.state,
                    country_name: checkout.country,
                    confirmation_id: checkout.confirmation_id,
                    payment_amount: checkout.payment_amount
                };
                if (checkout.card_type < 5) {
                    var exp_date = checkout.expiration_date.split("/");
                    params["payment_type_id"] = 1;
                    params["credit_card_type_id"] = checkout.card_type;
                    params["credit_card_number"] = checkout.card_number;
                    params["credit_card_expiration_month"] = exp_date[0];
                    params["credit_card_expiration_year"] = exp_date[1];
                    params["credit_card_cid"] = checkout.card_cvv
                } else {
                    params["payment_type_id"] = 33;
                    params["bank_account_number"] = checkout.bank_account_number;
                    params["bank_routing_number"] = checkout.bank_routing_number;
                    params["bank_account_holder_name"] = checkout.bank_account_holder_name
                }
                rpapi.getWithParams("AddReservationPayment", params).success(function(obj) {
                    hide_waitMe("#step3");
                    if (obj.data.message) {
                        Alert.add(Alert.infoType, obj.data.message)
                    } else {
                        Alert.add(Alert.errorType, "Unknown error ocurred.")
                    }
                })
            }
        };
        
        $scope.requestMoreInfo = function(){
            jQuery('#myModal2').modal('show');
            jQuery('#myModal2').on('shown.bs.modal', function() {
                 jQuery(this).before(jQuery('.modal-backdrop'));
                 jQuery(this).css("z-index", parseInt(jQuery('.modal-backdrop').css('z-index')) + 1);
            }); 
        }

        $scope.setNights = function() {
            
            if($scope.modal_nights) {
                jQuery('#myModal').modal("hide");
                $scope.modal_checkin = jQuery('#modal_checkin').val();
                var frm = new Date($scope.modal_checkin);
                nts = parseInt($scope.modal_nights);

                var the_year = frm.getFullYear();
                if (the_year < 2e3) the_year = 2e3 + the_year % 100;
                var to = new Date(the_year, frm.getMonth(), frm.getDate() + nts);
                $scope.modal_checkout = to.format("mm/dd/yyyy");
                var booking = {
                    checkin: frm.format("mm/dd/yyyy"),
                    checkout: to.format("mm/dd/yyyy"),
                    unit_id: $scope.book.unit_id,
                    occupants: 1,
                    occupants_small: 0,
                    pets: 0
                };
                jQuery("#modal_end_date").datepicker("option", "minDate", frm);
                $scope.book.checkin = frm.format("mm/dd/yyyy");
                $scope.book.checkout = to.format("mm/dd/yyyy");
                jQuery('#book_start_date').val(frm.format("mm/dd/yyyy"));
                jQuery('#book_end_date').val(to.format("mm/dd/yyyy"));
                $scope.getPreReservationPrice2($scope.book,1)
            }
            //$scope.updatePricePopupCalendar()
        };
        $scope.initCheckout = function() {

            if ($scope.hash) {
                var params = {
                    hash: $scope.hash,
                    return_payments: "yes"
                };
                rpapi.getWithParams("GetReservationPrice", params).success(function(obj) {
                    var res_price = obj.data;
                    if (res_price.optional_fees.id) {
                        resultData = [];
                        resultData.push(res_price.optional_fees);
                        res_price.optional_fees = resultData
                    }
                    var arr_amenities = [];
                    if (res_price.optional_fees.length > 0) {
                        angular.forEach(res_price.optional_fees, function(optional_fee, i) {
                            if (optional_fee.travel_insurance == 0 && optional_fee.cfar == 0 && optional_fee.damage_waiver == 0) {
                                arr_amenities.push({
                                    amenity_cost: $filter("currency")(optional_fee.value, undefined, 2),
                                    amenity_id: optional_fee.id,
                                    amenity_thumbnail: null,
                                    amenity_name: optional_fee.name,
                                    amenity_description: optional_fee.description
                                })
                            }
                        })
                    }
                    if ($scope.amenities.length == 0) {
                        $scope.amenities = arr_amenities
                    }
                    if (res_price.required_fees.id) {
                        resultData = [];
                        resultData.push(res_price.required_fees);
                        res_price.required_fees = resultData
                    }
                    if (res_price.taxes_details.id) {
                        resultData = [];
                        resultData.push(res_price.taxes_details);
                        res_price.taxes_details = resultData
                    }
                    if (res_price.security_deposits && res_price.security_deposits.security_deposit.ledger_id) {
                        resultData = [];
                        resultData.push(res_price.security_deposits.security_deposit);
                        res_price.security_deposits.security_deposit = resultData;
                        $scope.chkDamageWaiverNo = true
                    }
                    var total_taxes = 0;
                    angular.forEach(res_price.taxes_details, function(value, key) {
                        total_taxes += value.value
                    });
                    angular.forEach(res_price.required_fees, function(value, key) {
                        total_taxes += value.value
                    });
                    angular.forEach(res_price.optional_fees, function(value, key) {
                        if (value.damage_waiver == 1) {
                            $scope.hasDamageProtection = true;
                            $scope.damageProtection = value.value
                        }
                        if (value.travel_insurance == 1) {
                            $scope.hasTravelInsurance = true;
                            $scope.travelInsurance = value.value
                        }
                        if (value.cfar == 1) {
                            $scope.hasCfar = true;
                            $scope.cfar = value.value
                        }
                        if (!$scope.hasDamageProtection && !$scope.hasTravelInsurance) {
                            $scope.stepTwoDisabled = false
                        }
                    });
                    angular.forEach(res_price.security_deposits, function(value, key) {
                        $scope.securityDeposit = value.value
                    });
                    $scope.subTotal = $scope.calculateMarkup((obj.data.price + obj.data.coupon_discount).toString());
                    var dif = $scope.subTotal - obj.data.coupon_discount - obj.data.price;
                    $scope.taxesAndFees = total_taxes - dif;
                    if (res_price.reservation_id) {
                        rpapi.getWithParams("GetReservationInfo", params).success(function(obj) {
                            var res_info = obj.data.reservation;
                            $scope.unit = res_info.unit_id;
                            var params = {
                                startdate: res_info.startdate,
                                enddate: res_info.enddate,
                                occupants: res_info.occupants,
                                use_room_type_logic: parseInt($rootScope.roomTypeLogic),
                                page_number: 1,
                                page_results_number: 1e3
                            };
                            if (parseInt($rootScope.roomTypeLogic) != 1) {
                                params["unit_id"] = res_info.unit_id
                            } else {
                                params["condo_type_id"] = res_info.condo_type_id;
                                params["location_id"] = res_info.location_id
                            }
                            rpapi.getWithParams("GetPropertyAvailability", params).success(function(obj) {
                                if (obj.status) {
                                    $scope.error = true;
                                    $scope.errorMessage = obj.status.description;
                                    return false
                                } else {
                                    var result = obj.data.available_properties;
                                    if (result.pagination.total_units == 0) {
                                        $scope.error = true;
                                        $scope.errorMessage = "Sorry, this property is not available during the selected dates.";
                                        return false
                                    }
                                }
                            }).error(function() {
                                $scope.error = true;
                                $scope.errorMessage = Alert.errorMessage;
                                return false
                            });
                            $scope.checkout = {
                                fname: res_info.first_name,
                                lname: res_info.last_name,
                                email: res_info.email,
                                phone: $scope.isEmptyObject(res_info.phone) ? "" : res_info.phone,
                                unit: res_info.unit_id,
                                promo_code: $scope.isEmptyObject(res_info.coupon_code) ? "" : res_info.coupon_code
                            };
                            if ($scope.startDate == "" || $scope.startDate == undefined) $scope.startDate = res_info.startdate;
                            if ($scope.endDate == "" || $scope.endDate == undefined) $scope.endDate = res_info.enddate;
                            if ($scope.occupants == "" || $scope.occupants == undefined) $scope.occupants = res_info.occupants;
                            if ($scope.occupants_small == "" || $scope.occupants_small == undefined) $scope.occupants_small = res_info.occupants_small;
                            if ($scope.pets == "" || $scope.pets == undefined) $scope.pets = res_info.pets;
                            $scope.reservationDetails = res_price;
                            $scope.reservationDetails.location_name = res_price.unit_name;
                            if (parseInt($rootScope.roomTypeLogic) == 1) {
                                $scope.unit_name = res_price.condo_type_name
                            }
                            $scope.checkout.address = res_info.address1;
                            $scope.stepOneDisabled = false;
                            $scope.getCountries();
                            $scope.getStates()
                        })
                    }
                })
            } else {
                var checkout_cookie = $cookies.getObject("streamline-checkout-cookie");
                var confirmation_cookie = $cookies.getObject("streamline-confirmation-cookie");
                if (checkout_cookie) {
                    $scope.checkout = {};
                    if (checkout_cookie["fname"]) {
                        $scope.checkout.fname = checkout_cookie["fname"]
                    }
                    if (checkout_cookie["lname"]) {
                        $scope.checkout.lname = checkout_cookie["lname"]
                    }
                    if (checkout_cookie["email"]) {
                        $scope.checkout.email = checkout_cookie["email"]
                    }
                    if (checkout_cookie["phone"]) {
                        $scope.checkout.phone = checkout_cookie["phone"]
                    }
                }
                if (confirmation_cookie) {
                    rpapi.getWithParams("GetReservationInfo", {
                        confirmation_id: confirmation_cookie["confirmation_id"]
                    }).success(function(obj) {
                        if (obj.data) {
                            if (obj.data.reservation.unit_id == $scope.unit && obj.data.reservation.startdate == $scope.startDate && obj.data.reservation.enddate == $scope.endDate) {
                                $scope.confirmationId = confirmation_cookie["confirmation_id"]
                            }
                        }
                    })
                }
                var params = {
                    startdate: $scope.startDate,
                    enddate: $scope.endDate,
                    occupants: $scope.occupants,
                    page_number: 1,
                    page_results_number: 1e3,
                    use_room_type_logic: parseInt($rootScope.roomTypeLogic)
                };
                if (parseInt($rootScope.roomTypeLogic) != 1) {
                    params["unit_id"] = $scope.unit_id
                } else {
                    params["condo_type_id"] = $scope.condo_type_id;
                    params["location_id"] = $scope.location_id
                }
                if ($scope.unit && $scope.startDate && $scope.endDate && $scope.occupants) {
                    rpapi.getWithParams("GetPropertyAvailability", params).success(function(obj) {
                        if (obj.status) {
                            $scope.error = true;
                            $scope.errorMessage = obj.status.description
                        } else {
                            var result = obj.data.available_properties;
                            if (result.pagination.total_units == 0) {
                                $scope.error = true;
                                $scope.errorMessage = "Sorry, this property is not available during the selected dates."
                            } else {
                                $scope.getPreReservation(1);
                                $scope.getCountries();
                                $scope.getStates()
                            }
                        }
                    }).error(function() {
                        $scope.error = true;
                        $scope.errorMessage = Alert.errorMessage
                    })
                } else {
                    $scope.error = true;
                    $scope.errorMessage = Alert.errorMessage
                }
            }
        };
        $scope.isEmptyObject = function(obj) {
            console.log(obj);
            return angular.equals({}, obj)
        };
        $scope.renderCalendar = function(date, checkout) {
            var title = "";
            var booked = false;
            var strClass = "available";
            angular.forEach($rootScope.rates_details, function(rateObj, index) {
                var periodBegin = new Date(rateObj.period_begin);
                var periodEnd = new Date(rateObj.period_end);
                if (date >= periodBegin && date <= periodEnd) {
                    var daysMapping = {
                        Sunday: 0,
                        Monday: 1,
                        Tuesday: 2,
                        Wednesday: 3,
                        Thursday: 4,
                        Friday: 5,
                        Saturday: 6
                    };
                    if (rateObj.daily_first_interval) {
                        var arrInterval = rateObj.daily_first_interval.split("-");
                        title = rateObj.daily_first_interval_price;
                        if (arrInterval.length > 1) {
                            var firstInt = daysMapping[arrInterval[0]];
                            var secondInt = daysMapping[arrInterval[1]];
                            if (secondInt > firstInt) {
                                if (date.getDay() >= firstInt && date.getDay() <= secondInt) {
                                    title = rateObj.daily_first_interval_price
                                } else {
                                    title = rateObj.daily_second_interval_price
                                }
                            } else {
                                if (date.getDay() < firstInt && date.getDay() > secondInt) {
                                    title = rateObj.daily_second_interval_price
                                } else {
                                    title = rateObj.daily_first_interval_price
                                }
                            }
                        } else {
                            title = rateObj.daily_first_interval_price
                        }
                    } else {
                        title = rateObj.season_name
                    }
                }
            });
            angular.forEach($rootScope.calendar, function(calObj, index) {
                var use_slash = false;
                var startdate = new Date(calObj.startdate);
                var enddate = new Date(calObj.enddate);
                if ($rootScope.slash == "1") use_slash = true;
                if (use_slash) {
                    enddate.setTime(enddate.getTime() + 1 * 864e5);
                    if (!checkout) {
                        if (date >= startdate && date <= enddate) {
                            booked = true;
                            strClass = "booked";
                            if (date.getTime() === startdate.getTime()) {
                                if ($rootScope.calendar[index - 1]) {
                                    var previousdate = new Date($rootScope.calendar[index - 1].enddate);
                                    previousdate.setTime(previousdate.getTime() + 1 * 864e5);
                                    if (previousdate.getTime() !== startdate.getTime()) {
                                        booked = true;
                                        strClass = "slashl"
                                    }
                                } else {
                                    booked = true;
                                    strClass = "slashl"
                                }
                            } else if (date.getTime() === enddate.getTime()) {
                                booked = false;
                                strClass = "slashr"
                            }
                        }
                    } else {
                        if (date.getTime() === startdate.getTime()) {
                            if ($rootScope.calendar[index - 1]) {
                                var previousdate = new Date($rootScope.calendar[index - 1].enddate);
                                previousdate.setTime(previousdate.getTime() + 1 * 864e5);
                                if (previousdate.getTime() !== startdate.getTime()) {
                                    booked = false;
                                    strClass = "slashl"
                                } else {
                                    booked = false;
                                    strClass = "booked"
                                }
                            } else {
                                booked = false;
                                strClass = "slashl"
                            }
                        }
                        if (date > startdate && date <= enddate) {
                            booked = true;
                            strClass = "booked";
                            if ($scope.book.checkin) {
                                checkin = new Date($scope.book.checkin);
                                if (date > checkin) {
                                    $scope.maxCalendarDate = date
                                }
                            }
                        }
                    }
                } else {
                    if (!checkout) {
                        if (date >= startdate && date <= enddate) {
                            booked = true;
                            strClass = "booked"
                        }
                    } else {
                        if (date.getTime() === startdate.getTime()) {
                            booked = false;
                            strClass = "available"
                        }
                        if (date > startdate && date <= enddate) {
                            booked = true;
                            strClass = "booked"
                        }
                    }
                }
            });
            if ($rootScope.hideTooltips == 1) {
                title = ""
            }
            return [!booked, strClass, title]
        };
        $scope.renderCalendarNew = function(date, restriction, action) {
            if ($rootScope.calendar2.range) {
                var str_price = "";
                var start_date = new Date($rootScope.calendar2.range.beginDate);
                var end_date = new Date($rootScope.calendar2.range.endDate);
                angular.forEach($rootScope.rates_details, function(rateObj) {
                    var periodBegin = new Date(rateObj.period_begin);
                    var periodEnd = new Date(rateObj.period_end);
                    if (date >= periodBegin && date <= periodEnd) {
                        var daysMapping = {
                            Sunday: 0,
                            Monday: 1,
                            Tuesday: 2,
                            Wednesday: 3,
                            Thursday: 4,
                            Friday: 5,
                            Saturday: 6
                        };
                        if (rateObj.daily_first_interval) {
                            var arrInterval = rateObj.daily_first_interval.split("-");
                            str_price = rateObj.daily_first_interval_price;
                            if (arrInterval.length > 1) {
                                var firstInt = daysMapping[arrInterval[0]];
                                var secondInt = daysMapping[arrInterval[1]];
                                if (secondInt > firstInt) {
                                    if (date.getDay() >= firstInt && date.getDay() <= secondInt) {
                                        str_price = rateObj.daily_first_interval_price
                                    } else {
                                        str_price = rateObj.daily_second_interval_price
                                    }
                                } else {
                                    if (date.getDay() < firstInt && date.getDay() > secondInt) {
                                        str_price = rateObj.daily_second_interval_price
                                    } else {
                                        str_price = rateObj.daily_first_interval_price
                                    }
                                }
                            } else {
                                str_price = rateObj.daily_first_interval_price
                            }
                        } else {
                            str_price = rateObj.season_name
                        }
                    }
                });
                var loop = new Date(start_date);
                var i = 0;
                while (loop <= end_date) {
                    if (date.toDateString() == loop.toDateString()) {
                        var prev_available = $rootScope.calendar2.availability.substring(i - 1, i);
                        var available = $rootScope.calendar2.availability.substring(i, i + 1);
                        var change_over = $rootScope.calendar2.changeOver.substring(i, i + 1);
                        if (available == "Y") {
                            var is_available = true;
                            if (restriction && action == "checkin" && (change_over == "X" || change_over == "O")) {
                                is_available = false
                            } else if (restriction && action == "checkout" && (change_over == "X" || change_over == "I")) {
                                is_available = false
                            } else if (!restriction) {
                                is_available = false
                            }
                            var class_available = prev_available == "N" ? "slash-end available" : "available";
                            return [is_available, class_available, str_price]
                        } else {
                            var class_available = prev_available == "Y" ? "slash-start available" : "booked";
                            var is_available = false;
                            if (prev_available == "Y" && action == "checkout") {
                                is_available = true;
                                class_available = "slash-start available"
                            }
                            return [is_available, class_available, str_price]
                        }
                    }
                    var current_date = loop.setDate(loop.getDate() + 1);
                    loop = new Date(current_date);
                    i++
                }
            }
            return [false, "booked", ""]
        };
        $scope.getPreReservationPrice2 = function(booking, res) {
            if (booking.checkin && booking.checkout) {
                $scope.startDate = booking.checkin;
                $scope.endDate = booking.checkout;
                $scope.occupants = booking.occupants;
                $scope.unit = booking.unit_id;
                $scope.occupants_small = booking.occupants_small;
                $scope.pets = booking.pets;
                rpapi.getWithParams("VerifyPropertyAvailability", {
                    unit_id: booking.unit_id,
                    startdate: booking.checkin,
                    enddate: booking.checkout,
                    occupants: booking.occupants,
                    occupants_small: booking.occupants_small,
                    pets: booking.pets,
                    use_room_type_logic: parseInt($rootScope.roomTypeLogic)
                }).success(function(obj) {
                    if (obj.status) {
                        $scope.reservation_days = [];
                        $scope.total_reservation = 0;
                        $scope.first_day_price = 0;
                        $scope.rent = 0;
                        $scope.taxes = 0;
                        var errorMsg = obj.status.description;
                        if (obj.status.code == "E0031" && $rootScope.searchSettings.restrictionMsg != "") {
                            errorMsg = $rootScope.searchSettings.restrictionMsg
                        }
                        jQuery(".sticky-wrapper").hide();
                        jQuery(".price_sticky").hide();
                        jQuery(".view_breakdown_days").hide();
                        Alert.add(Alert.errorType, errorMsg);
                        hide_waitMe("#resortpro-book-unit form");
                        $scope.isDisabled = true
                    } else {
                        jQuery(".sticky-wrapper").show();
                        jQuery(".price_sticky").show();
                        jQuery(".view_breakdown_days").show();
                        Alert.clear();
                        $scope.isDisabled = false;
                        if ($rootScope.bookingSettings.inquiryOnlyFrom && $rootScope.bookingSettings.inquiryOnlyTo) {
                            var inquiryOnlyFrom = new Date($rootScope.bookingSettings.inquiryOnlyFrom);
                            var inquiryOnlyTo = new Date($rootScope.bookingSettings.inquiryOnlyTo);
                            if (!(checkout.getTime() <= inquiryOnlyFrom.getTime() || checkin.getTime() >= inquiryOnlyTo.getTime())) {
                                Alert.add(Alert.errorType, "These dates are Inquiry Only, please send us a inquiry using the form below");
                                hide_waitMe("#resortpro-book-unit form");
                                $scope.isDisabled = true;
                                return false
                            }
                        }
                        var maxLengthStay = $rootScope.bookingSettings.maxLengthStay;
                        if (maxLengthStay > 0 && stayLength > maxLengthStay) {
                            Alert.add(Alert.errorType, "the max stay is on.");
                            hide_waitMe("#resortpro-book-unit form");
                            $scope.isDisabled = true;
                            return false
                        }
                        $scope.isDisabled = false
                    }
                });
                $scope.getPreReservation()
            }
        };
        $scope.setCheckoutDate = function(date) {
            if ($scope.book.checkout) {
                $scope.book.checkout = date.format("mm/dd/yyyy")
            }
        };
        $scope.getPreReservation = function(use_default) {
            use_default = use_default || 0;
            var params = {
                startdate: $scope.startDate,
                enddate: $scope.endDate,
                occupants: $scope.occupants,
                unit_id: $scope.unit,
                return_payments: "yes"
            };
            if ($scope.pets) {
                params["pets"] = $scope.pets
            }
            if ($scope.occupants_small) {
                params["occupants_small"] = $scope.occupants_small
            }
            if (use_default == 1 && $rootScope.includeEnabledOptional === 1) {
                params["optional_default_enabled"] = "yes"
            }
            var method = "GetPreReservationPrice";
            if ($scope.checkout && $scope.checkout.promo_code != "") params["coupon_code"] = $scope.checkout.promo_code;
            var arr_fees = [];
            $scope.optionalItems == "";
            jQuery(".optional_fee:checked").each(function(index) {
                if (jQuery(this).prop("checked")) {
                    var qty = parseInt(jQuery("#qty-optional-fee-" + jQuery(this).val()).val());
                    if (!isNaN(qty)) {
                        params["optional_fee_" + jQuery(this).val()] = qty
                    } else {
                        params["optional_fee_" + jQuery(this).val()] = "yes"
                    }
                    arr_fees.push(jQuery(this).val())
                }
            });
            $scope.optionalItems = arr_fees.join(",");
            if ($scope.hash !== "") {
                params["hash"] = $scope.hash;
                method = "GetReservationPrice"
            }
            run_waitMe(".form-checkout-wrapper", "bounce", "Updating Information...");
            run_waitMe("#step0", "bounce", "Updating Price");
            rpapi.getWithParams(method, params).success(function(obj) {
                hide_waitMe(".form-checkout-wrapper");
                hide_waitMe("#step0");
                hide_waitMe(".price_sticky");
                var arr_amenities = [];
                if (obj.data.optional_fees.id) {
                    resultData = [];
                    resultData.push(obj.data.optional_fees);
                    obj.data.optional_fees = resultData
                }
                if ($scope.amenities.length == 0) {
                    if (obj.data.optional_fees.length > 0) {
                        angular.forEach(obj.data.optional_fees, function(optional_fee, i) {
                            if (optional_fee.active == 1) {
                                total_optional_fees += optional_fee.value
                            }
                            if (optional_fee.travel_insurance == 0 && optional_fee.cfar == 0 && optional_fee.damage_waiver == 0) {
                                arr_amenities.push({
                                    amenity_cost: $filter("currency")(optional_fee.value, undefined, 2),
                                    amenity_id: optional_fee.id,
                                    amenity_thumbnail: null,
                                    amenity_name: optional_fee.name,
                                    amenity_description: optional_fee.description
                                })
                            }
                        })
                    }
                    $scope.amenities = arr_amenities
                }
                if (obj.data.required_fees.id) {
                    resultData = [];
                    resultData.push(obj.data.required_fees);
                    obj.data.required_fees = resultData
                }
                if (obj.data.taxes_details.id) {
                    resultData = [];
                    resultData.push(obj.data.taxes_details);
                    obj.data.taxes_details = resultData
                }
                if (obj.data.security_deposits && obj.data.security_deposits.security_deposit.ledger_id) {
                    resultData = [];
                    resultData.push(obj.data.security_deposits.security_deposit);
                    obj.data.security_deposits.security_deposit = resultData
                }
                var total_fees = 0;
                var total_taxes = 0;
                var total_optional_fees = 0;
                angular.forEach(obj.data.optional_fees, function(optional_fee, i) {
                    if (optional_fee.active == 1) {
                        total_optional_fees += optional_fee.value
                    }
                });
                angular.forEach(obj.data.required_fees, function(fee, i) {
                    total_fees += fee.value
                });
                angular.forEach(obj.data.taxes_details, function(fee, i) {
                    total_taxes += fee.value
                });
                $scope.subTotal = $scope.calculateMarkup((obj.data.price + obj.data.coupon_discount).toString());
                var dif = $scope.subTotal - obj.data.coupon_discount - obj.data.price;
                $scope.totalFees = total_fees;
                $scope.totalTaxes = total_taxes;
                $scope.taxesAndFees = total_taxes + total_fees + total_optional_fees - dif;
                $scope.totalPrice = obj.data.total;
                if (arr_fees.length > 0) params["optional_fee"] = arr_fees.join();
                params.use_room_type_logic = parseInt($rootScope.roomTypeLogic);
                if (obj.data.expected_charges && obj.data.expected_charges.type_id) {
                    resultData = [];
                    resultData.push(obj.data.expected_charges);
                    obj.data.expected_charges = resultData
                }
                if ($rootScope.checkoutSettings.groupExpectedCharges === 1 && obj.data.expected_charges.length > 1) {
                    var grouped_charges = [];
                    angular.forEach(obj.data.expected_charges, function(charge, i) {
                        var found_charge = false;
                        angular.forEach(grouped_charges, function(grouped_charge, i) {
                            if (grouped_charge.charge_date == charge.charge_date) {
                                found_charge = true;
                                grouped_charge.charge_value += charge.charge_value;
                                grouped_charge.description = "Payment Schedule"
                            }
                        });
                        if (!found_charge) {
                            grouped_charges.push(charge)
                        }
                    });
                    obj.data.expected_charges = grouped_charges
                }
                $scope.reservationDetails = obj.data;
                angular.forEach(obj.data.optional_fees, function(value, key) {
                    if (value.damage_waiver == 1) {
                        $scope.hasDamageProtection = true;
                        $scope.damageProtection = value.value
                    }
                    if (value.travel_insurance == 1) {
                        $scope.hasTravelInsurance = true;
                        $scope.travelInsurance = value.value
                    }
                    if (value.cfar == 1) {
                        $scope.hasCfar = true;
                        $scope.cfar = value.value
                    }
                });
                if (!$scope.hasDamageProtection && !$scope.hasTravelInsurance && !$scope.hasCfar) {
                    $scope.stepTwoDisabled = false
                }
                var totalDeposits = 0;
                if (obj.data.security_deposits) {
                    angular.forEach(obj.data.security_deposits.security_deposit, function(value, key) {
                        totalDeposits += value.deposit_required
                    })
                }
                $scope.securityDeposit = totalDeposits
            })
        };
        $scope.getTermsAndConditions = function() {
            if ($scope.unit > 0) {
                var params = {
                    trigger_id: 18,
                    unit_id: $scope.unit
                };
                rpapi.getWithParams("GetPropertyDocumentHtml", params).success(function(obj) {
                    if (obj.data && !jQuery.isEmptyObject(obj.data.document_html_code)) {
                        $scope.terms = $sce.trustAsHtml(obj.data.document_html_code)
                    } else {
                        $scope.terms = ""
                    }
                })
            }
        };
        $scope.getPrivacyPolicy = function() {
            if ($scope.unit > 0) {
                var params = {
                    trigger_id: 389
                };
                rpapi.getWithParams("GetCompanyDocumentHtml", params).success(function(obj) {
                    if (obj.data && !jQuery.isEmptyObject(obj.data.document_html_code)) {
                        $scope.privacyPolicyHtml = $sce.trustAsHtml(obj.data.document_html_code)
                    } else {
                        $scope.privacyPolicyHtml = ""
                    }
                })
            }
        };
        $scope.getCountries = function() {
            rpapi.getWpActionWithParams("streamlinecore-get-countries", null).success(function(obj) {
                $scope.countries = obj.data.countries
            })
        };
        $scope.getStates = function() {
            var country = $scope.checkout.country && $scope.checkout.country != "" ? $scope.checkout.country : "US";
            var params = {
                country_name: country
            };
            rpapi.getWpActionWithParams("streamlinecore-get-states", params).success(function(obj) {
                $scope.states = obj.data.states
            })
        };
        $scope.processCheckout = function(checkout) {
            run_waitMe("#step3", "bounce", "Processing your request");
            var params = {
                pricing_model: 0,
                startdate: $scope.startDate,
                enddate: $scope.endDate,
                occupants: $scope.book.occupants,
                occupants_small: $scope.book.occupants_small,
                first_name: checkout.fname,
                last_name: checkout.lname,
                email: checkout.email,
                phone: checkout.phone,
                mobile_phone: checkout.phone,
                address: checkout.address,
                address2: checkout.address2,
                city: checkout.city,
                zip: checkout.postal_code,
                state_name: checkout.state,
                country_name: checkout.country,
                pets:$scope.book.pets
            };
            if ($rootScope.checkoutSettings.createStreamSign == 1) {
                params["streamsign_thankyou_url"] = location.protocol + "//" + location.host + "/thank-you/";
                params["streamsign_redirect"] = "yes"
            }
            if (checkout.notes) {
                params["client_comments"] = checkout.notes
            }
            if (checkout.card_type < 5) {
                var exp_month, exp_year;
                if (checkout.expiration_date) {
                    var exp_date = checkout.expiration_date.split("/");
                    exp_month = exp_date[0];
                    exp_year = exp_date[1]
                } else {
                    exp_month = checkout.expire_month;
                    exp_year = checkout.expire_year
                }
                params["credit_card_type_id"] = checkout.card_type;
                params["credit_card_number"] = checkout.card_number;
                params["credit_card_expiration_month"] = exp_month;
                params["credit_card_expiration_year"] = exp_year;
                params["credit_card_cid"] = checkout.card_cvv
            } else {
                params["payment_type_id"] = 33;
                params["bank_account_number"] = checkout.bank_account_number;
                params["bank_routing_number"] = checkout.bank_routing_number;
                params["bank_account_holder_name"] = checkout.bank_account_holder_name
            }
            jQuery.ajax({
                url: "https://api.ipdata.co",
                global: false,
                type: "GET",
                data: {},
                async: false,
                success: function(data) {
                    params["ip"] = data.ip;
                    params["ip_location"] = data.country_name
                }
            });
            params["time_stamp"] = Math.floor(Date.now() / 1e3);
            if (typeof jQuery(".policy_and_privacy").html() != "undefined") {
                params["privacy_policy"] = jQuery(".policy_and_privacy").html()
            } else {
                params["privacy_policy"] = ""
            }
            if (jQuery("#newsletter").is(":checked")) {
                params["opt_in_marketing"] = "yes"
            } else {
                params["opt_in_marketing"] = "no"
            }
            if ($rootScope.doNotVerifyZip == 1) {
                params["do_not_verify_zip_code"] = 1
            }
            if ($rootScope.roomTypeLogic == 1) {
                params["use_room_type_logic"] = 1;
                params["condo_type_id"] = $scope.checkout.condo_type_id;
                params["location_id"] = $scope.checkout.location_id
            } else {
                params["unit_id"] = $scope.unit
            }
            if ($rootScope.bookingSettings) {
                if ($rootScope.bookingSettings.hearedAboutId > 0) {
                    params["hear_about_id"] = $rootScope.bookingSettings.hearedAboutId
                }
                if ($rootScope.bookingSettings.blockedRequest == 1) {
                    params["status_id"] = 10
                }
            }
            if ($scope.checkout && $scope.checkout.promo_code != "") {
                params["coupon_code"] = $scope.checkout.promo_code
            }
            if ($scope.book.pets && $scope.book.pets > 0) {
                params["pets"] = $scope.book.pets
            }
            if ($scope.hash != "") {
                params["hash"] = $scope.hash
            }
            if ($scope.referrer_url != "") {
                params["referrer_url"] = $scope.referrer_url
            }
            if ($scope.confirmationId > 0) {
                params["confirmation_id"] = $scope.confirmationId
            }
            var amenity_addons = [];
            jQuery(".optional_fee:checked").each(function(index) {
                if (jQuery(this).prop("checked")) {
                    var qty = parseInt(jQuery("#qty-optional-fee-" + jQuery(this).val()).val());
                    if (!isNaN(qty)) {
                        var amenity_addon = {
                            amenity_id: jQuery(this).val(),
                            amenity_quantity: qty
                        };
                        amenity_addons.push(amenity_addon)
                    } else {
                        params["optional_fee_" + jQuery(this).val()] = "yes"
                    }
                }
            });
            if (amenity_addons.length > 0) {
                params["amenity_addon"] = amenity_addons
            }
           
            rpapi.getWithParams("MakeReservation", params).success(function(obj) {
                hide_waitMe("#step3");
                if (obj.status) {
                    Alert.add(Alert.errorType, obj.status.description)
                } else {
                    jQuery("#btn-checkout").attr("disabled", "disabled");
                    var res = obj.data.reservation;
                    jQuery("#confirmation_id").val(res.confirmation_id);
                    jQuery("#location_name").val(res.location_name);
                    jQuery("#condo_type_name").val(res.condo_type_name);
                    jQuery("#unit_name").val(res.unit_name);
                    jQuery("#startdate").val(res.startdate);
                    jQuery("#enddate").val(res.enddate);
                    jQuery("#occupants").val(res.occupants);
                    jQuery("#occupants_small").val(res.occupants_small);
                    jQuery("#petscount").val(res.pets);
                    jQuery("#price_common").val(res.price_common);
                    jQuery("#price_balance").val(res.price_balance);
                    jQuery("#travelagent_name").val(res.travelagent_name);
                    jQuery("#unit_name").val(res.unit_name);
                    var now = new Date;
                    now.setDate(now.getDate() - 10);
                    $cookies.putObject("streamline-confirmation-cookie", null, {
                        path: "/",
                        expires: now
                    });
                    $cookies.remove("streamline-confirmation-cookie");
                    rpapi.getWithParams("GetReservationInfo", {
                        confirmation_id: res.confirmation_id
                    }).success(function(obj) {
                        jQuery('#paymentform')[0].reset();
                        var res_info = obj.data.reservation;
                        jQuery("#email").val(res_info.email);
                        jQuery("#fname").val(res_info.first_name);
                        jQuery("#lname").val(res_info.last_name);
                        jQuery("#unit_id").val(res_info.unit_id);
                        if (res.streamsign_url && res.streamsign_url != "") {
                            window.location.href = res.streamsign_url
                        } else {
                            jQuery("#form_thankyou").submit()
                        }
                    })
                }
            })
        };
        $scope.getPropertyInfo = function() {
            rpapi.getWithParams("GetPropertyInfo", {
                unit_id: $scope.unit
            }).success(function(obj) {
                $scope.property = obj.data;
                if ($scope.checkout) {
                    $scope.checkout.country = "US";
                    $scope.checkout.condo_type_id = obj.data.condo_type_id;
                    $scope.checkout.location_id = obj.data.location_id;
                    if (parseInt($rootScope.roomTypeLogic) == 1) {
                        $scope.unit_name = obj.data.condo_type_name
                    } else {
                        if (obj.data.web_name && obj.data.name != "") {
                            $scope.unit_name = obj.data.web_name
                        } else if (obj.data.name == "Home") {
                            $scope.unit_name = obj.data.location_name
                        } else {
                            $scope.unit_name = obj.data.name
                        }
                    }
                }
            })
        }
    }])
})();
(function() {
    var directives = angular.module("resortpro.directives", []);
    directives.directive("ngAlt", function() {
        return {
            restrict: "A",
            link: function(scope, elem, attrs) {
                if (attrs.ngAlt) {
                    elem.on("load", function(event) {
                        elem[0].setAttribute("alt", attrs.ngAlt)
                    })
                }
            }
        }
    });
    directives.directive("errSrc", function() {
        return {
            link: function(scope, element, attrs) {
                scope.$watch(function() {
                    return attrs["ngSrc"]
                }, function(value) {
                    if (!value) {
                        element.attr("src", attrs.errSrc)
                    }
                });
                element.bind("error", function() {
                    if (attrs.src != attrs.errSrc) {
                        attrs.$set("src", attrs.errSrc)
                    }
                })
            }
        }
    });
    directives.directive("calendar", function($rootScope) {
        return {
            restrict: "A",
            require: "ngModel",
            scope: {
                showDays: "&",
                updateModalCheckin: "&"
            },
            link: function(scope, elem, attrs, pCtrl) {
                var options = {
                    dateFormat: "mm/dd/yy",
                    minDate: 0,
                    numberOfMonths: 4,
                    showButtonPanel: false,
                    onSelect: function(dateText) {
                        scope.updateModalCheckin({
                            date: dateText
                        });
                        pCtrl.$setViewValue(dateText);
                        var myDateArr = dateText.split("/");
                        var month = myDateArr[0] - 1;
                        var day = myDateArr[1];
                        var numDays = 0;
                        var foundDay = false;
                        jQuery(".availability-calendar .ui-datepicker-calendar td").each(function() {
                            if (jQuery(this).attr("data-month") == month) {
                                if (parseInt(jQuery(this).find("a").html()) > parseInt(day)) {
                                    foundDay = true;
                                    numDays++
                                } else if (foundDay) {
                                    return false
                                }
                            }
                        });
                        jQuery("#modal_checkin").val(dateText);
                        jQuery("#myModal").modal();
                        jQuery('#myModal').on('shown.bs.modal', function() {
                             //To relate the z-index make sure backdrop and modal are siblings
                             jQuery(this).before(jQuery('.modal-backdrop'));
                             //Now set z-index of modal greater than backdrop
                             jQuery(this).css("z-index", parseInt(jQuery('.modal-backdrop').css('z-index')) + 1);
                        }); 
                        //jQuery("#myModal").appendTo("body");
                        setTimeout(function() {
                            add_tooltip()
                        }, 500)
                    },
                    beforeShowDay: function(date) {
                        return scope.showDays({
                            date: date
                        })
                    },
                    onChangeMonthYear: function(year, month, inst) {
                        setTimeout(function() {
                            add_tooltip()
                        }, 500)
                    }
                };
                elem.datepicker(options)
            }
        }
    });
    directives.directive("calendarmobile", function($rootScope) {
        return {
            restrict: "A",
            require: "ngModel",
            scope: {
                showDays: "&",
                updateModalCheckin: "&"
            },
            link: function(scope, elem, attrs, pCtrl) {
                var options = {
                    dateFormat: "mm/dd/yy",
                    minDate: 0,
                    numberOfMonths: 1,
                    showButtonPanel: false,
                    onSelect: function(dateText) {
                        scope.updateModalCheckin({
                            date: dateText
                        });
                        pCtrl.$setViewValue(dateText);
                        var myDateArr = dateText.split("/");
                        var month = myDateArr[0] - 1;
                        var day = myDateArr[1];
                        var numDays = 0;
                        var foundDay = false;
                        jQuery(".availability-calendar .ui-datepicker-calendar td").each(function() {
                            if (jQuery(this).attr("data-month") == month) {
                                if (parseInt(jQuery(this).find("a").html()) > parseInt(day)) {
                                    foundDay = true;
                                    numDays++
                                } else if (foundDay) {
                                    return false
                                }
                            }
                        });
                        jQuery("#modal_checkin").val(dateText);
                        jQuery("#myModal").modal();
                        jQuery("#myModal").appendTo("body");
                        setTimeout(function() {
                            add_tooltip()
                        }, 500)
                    },
                    beforeShowDay: function(date) {
                        return scope.showDays({
                            date: date
                        })
                    },
                    onChangeMonthYear: function(year, month, inst) {
                        setTimeout(function() {
                            add_tooltip()
                        }, 500)
                    }
                };
                elem.datepicker(options)
            }
        }
    });
    directives.directive("scrollTo", function($location, $anchorScroll) {
        return function(scope, element, attrs) {
            element.bind("click", function(event) {
                event.stopPropagation();
                scope.$on("$locationChangeStart", function(ev) {
                    ev.preventDefault()
                });
                var location = attrs.scrollTo;
                $location.hash(location);
                $anchorScroll()

            })
        }
    });
    directives.directive("sdpicker", function() {
        return {
            restrict: "A",
            require: "ngModel",
            link: function(scope, element, attrs, ngModelCtrl) {
                jQuery(function() {
                    var checkin_days = 0;
                    if (!isNaN(jQuery("#filter_start_date").data("checkin-days"))) {
                        checkin_days = jQuery("#filter_start_date").data("checkin-days")
                    }
                    var str_filterturndates = jQuery("#filter_start_date").data("filterturndates");
                    var arr_filterturndates = [];
                    if (typeof str_filterturndates == "number") {
                        arr_filterturndates.push(str_filterturndates.toString())
                    } else {
                        if (str_filterturndates && str_filterturndates.indexOf(",") > -1) {
                            arr_filterturndates = str_filterturndates.split(",")
                        }
                    }
                    element.datepicker({
                        dateFormat: "mm/dd/yy",
                        minDate: "+" + checkin_days + "d",
                        onSelect: function(date) {
                            ngModelCtrl.$setViewValue(date);
                            scope.$apply();
                            var frm = new Date(date);
                            nts = 1;
                            if (!isNaN(jQuery("#filter_start_date").attr("data-min-stay"))) {
                                nts = parseInt(jQuery("#filter_start_date").attr("data-min-stay"))
                            }
                            var the_year = frm.getFullYear();
                            if (the_year < 2e3) the_year = 2e3 + the_year % 100;
                            var to = new Date(the_year, frm.getMonth(), frm.getDate() + nts);
                            jQuery("#filter_end_date").datepicker("option", "minDate", to);
                            setTimeout(function() {
                                jQuery("#filter_end_date").datepicker("show")
                            }, 0);
                            scope.search.start_date = frm.format("mm/dd/yyyy");
                            scope.clearProperties();
                            scope.availabilitySearch(scope.search)
                        },
                        beforeShowDay: function(date) {
                            var is_available = true;
                            var class_day = "available";
                            if (arr_filterturndates.length > 0 && jQuery.inArray(date.getUTCDay().toString(), arr_filterturndates) == -1) {
                                is_available = false
                            }
                            if (!is_available) {
                                class_day = "booked"
                            }
                            return [is_available, class_day]
                        }
                    })
                })
            }
        }
    });
    directives.directive("edpicker", function() {
        return {
            restrict: "A",
            minDate: "+1d",
            require: "ngModel",
            link: function(scope, element, attrs, ngModelCtrl) {
                jQuery(function() {
                    var startdate = jQuery("#filter_start_date").val();
                    var frm = new Date(startdate);
                    var str_filterturndates = jQuery("#filter_start_date").data("filterturndates");
                    var arr_filterturndates = [];
                    if (str_filterturndates != "" && !isNaN(str_filterturndates)) {
                        arr_filterturndates.push(str_filterturndates.toString())
                    } else {
                        if (str_filterturndates && str_filterturndates.indexOf(",") > -1) {
                            arr_filterturndates = str_filterturndates.split(",")
                        }
                    }
                    element.datepicker({
                        dateFormat: "mm/dd/yy",
                        minDate: frm,
                        onSelect: function(date) {
                            ngModelCtrl.$setViewValue(date);
                            scope.$apply();
                            var frm = new Date(date);
                            var the_year = frm.getFullYear();
                            if (the_year < 2e3) the_year = 2e3 + the_year % 100;
                            var to = new Date(the_year, frm.getMonth(), frm.getDate());
                            scope.search.end_date = to.format("mm/dd/yyyy");
                            scope.clearProperties();
                            scope.availabilitySearch(scope.search)
                        },
                        beforeShowDay: function(date) {
                            var is_available = true;
                            var class_day = "available";
                            var start_date = jQuery("#filter_start_date").datepicker("getDate");
                            if (start_date) {
                                if (arr_filterturndates.length > 0 && start_date.getUTCDay().toString() != date.getUTCDay().toString()) {
                                    is_available = false;
                                    class_day = "booked"
                                }
                            } else {
                                if (arr_filterturndates.length > 0 && jQuery.inArray(date.getUTCDay().toString(), arr_filterturndates) == -1) {
                                    is_available = false
                                }
                                if (!is_available) {
                                    class_day = "booked"
                                }
                            }
                            return [is_available, class_day]
                        }
                    })
                })
            }
        }
    });
    directives.directive("bookcheckin", function($rootScope) {
        return {
            restrict: "A",
            scope: {
                showDays: "&",
                updatePrice: "&",
                updateCheckout: "&"
            },
            require: "ngModel",
            link: function(scope, element, attrs, ngModelCtrl) {
                jQuery(function() {
                    var days = 0;
                    var appendTimeout;
                    var calendarTips = '<ul class="calendar-tips"><li class="cal-selectable"><span>Checkin Available</span></li><li class="cal-available"><span>Checkout Available</span></li><li class="cal-unavailable"><span>Not Available</span></li></ul>';

                    function appendText(text) {
                        clearTimeout(appendTimeout);
                        appendTimeout = setTimeout(function() {
                            jQuery("#ui-datepicker-div .ui-datepicker-calendar").after("<div>" + text + "</div>")
                        }, 50)
                    }
                    if (!isNaN(jQuery("#book_start_date").attr("data-checkin-days"))) {
                        days = jQuery("#book_start_date").attr("data-checkin-days")
                    }
                    element.datepicker({
                        dateFormat: "mm/dd/yy",
                        minDate: "+" + days + "d",
                        onSelect: function(date) {
                            ngModelCtrl.$setViewValue(date);
                            scope.$apply();
                            var frm = new Date(date);
                            nts = 1;
                            if (!isNaN(jQuery("#book_start_date").attr("data-min-stay"))) {
                                nts = jQuery("#book_start_date").attr("data-min-stay")
                            }
                            var the_year = frm.getFullYear();
                            if (the_year < 2e3) the_year = 2e3 + the_year % 100;
                            var to = new Date(the_year, frm.getMonth(), parseInt(frm.getDate()) + parseInt(nts));
                            jQuery("#book_end_date").datepicker("option", "minDate", to);
                            scope.updateCheckout({
                                date: to
                            })
                        },
                        onClose: function() {
                            setTimeout(function() {
                                jQuery("#book_end_date").datepicker("show")
                            }, 0)
                        },
                        beforeShowDay: function(date) {
                            return scope.showDays({
                                date: date
                            })
                        },
                        beforeShow: function() {
                            appendText(calendarTips)
                        },
                        onChangeMonthYear: function() {
                            appendText(calendarTips)
                        }
                    })
                })
            }
        }
    });
    directives.directive("bookcheckout", function($rootScope) {
        return {
            restrict: "A",
            scope: {
                showDays: "&",
                updatePrice: "&"
            },
            require: "ngModel",
            link: function(scope, element, attrs, ngModelCtrl) {
                jQuery(function() {
                    var startdate = jQuery("#book_start_date").val();
                    var frm = new Date(startdate);
                    var appendTimeout;
                    var calendarTips = '<ul class="calendar-tips"><li class="cal-available"><span>Checkin Available</span></li><li class="cal-selectable"><span>Checkout Available</span></li><li class="cal-unavailable"><span>Not Available</span></li><ul/>';

                    function appendText(text) {
                        clearTimeout(appendTimeout);
                        appendTimeout = setTimeout(function() {
                            jQuery("#ui-datepicker-div .ui-datepicker-calendar").after("<div>" + text + "</div>")
                        }, 50)
                    }
                    element.datepicker({
                        dateFormat: "mm/dd/yy",
                        minDate: frm,
                        onSelect: function(date) {
                            scope.$apply(function() {
                                ngModelCtrl.$setViewValue(date)
                            });
                            scope.updatePrice()
                        },
                        beforeShowDay: function(date) {
                            return scope.showDays({
                                date: date
                            })
                        },
                        beforeShow: function() {
                            appendText(calendarTips)
                        },
                        onChangeMonthYear: function() {
                            appendText(calendarTips)
                        }
                    })
                })
            }
        }
    });
    directives.directive("sliderange", function($rootScope) {
        return {
            restrict: "A",
            scope: {
                showAvailability: "&",
                minPrice: "=",
                maxPrice: "="
            },
            require: "ngModel",
            link: function(scope, element, attrs, ngModelCtrl) {
                jQuery(function() {
                    element.slider({
                        range: true,
                        min: scope.minPrice,
                        max: scope.maxPrice,
                        step: 10,
                        values: [scope.minPrice, scope.maxPrice],
                        slide: function(event, ui) {
                        	scope.showAvailability({
                                minPrice: ui.values[0],
                                maxPrice: ui.values[1]
                            });
                        },
                        change: function(event, ui) {
                            scope.showAvailability({
                                minPrice: ui.values[0],
                                maxPrice: ui.values[1]
                            });
                            scope.$apply()   
                        }
                    });
                    jQuery("#amount").val("$" + scope.minPrice + " - $" + scope.maxPrice)
                    
                })
            }
        }
    });

    directives.directive("lazyLoad", function($rootScope) {

         return {
		        restrict: 'A',
		        link: function(scope, element, attrs){
		            const observer = new IntersectionObserver(loadImg)
		            const img = angular.element(element)[0];
		            observer.observe(img)

		            function loadImg(changes){
		                changes.forEach(change => {
		                    if(change.intersectionRatio > 0){
		                    	if(change.target.getAttribute("datasrc") == "trustpilot1"){
		                    		jQuery('.trustpilotdtl').removeClass("d-none");
		                    	}
		                    	if(change.target.getAttribute("datasrc") == "trustpilot"){
		                    		jQuery('.rating-one').removeClass("d-none");
		                    	}
		                    	if(change.target.getAttribute("datasrc") == "replaceclass"){
		                    		jQuery('.aboutussec').addClass("aboutUs");
		                    	}
		                    	if(change.target.getAttribute("datasrc") == "removeclass"){
		                    		jQuery(".carouselpart").removeClass("d-none");
		                    	}else{
		                    	  change.target.src = change.target.getAttribute("datasrc")	
		                    	}
		                        
		                    }
		                })
		            }    

		        }
         }

    });

    directives.directive("bedroomrange", function($rootScope) {
        return {
            restrict: "A",
            scope: {
                showAvailability: "&",
                minBedroomsNumber: "=",
                maxBedroomsNumber: "="
            },
            link: function(scope, element, attrs, ngModelCtrl) {
                jQuery(function() {
                    element.slider({
                        range: true,
                        min: scope.minBedroomsNumber,
                        max: scope.maxBedroomsNumber,
                        step: 1,
                        values: [scope.minBedroomsNumber, scope.maxBedroomsNumber],
                        slide: function(event, ui) {
                            jQuery("#streamlinecore_fw_bedrooms_number").val("Min Bed:" + ui.values[0] + " - Max Bed:" + ui.values[1])
                        },
                        change: function(event, ui) {
                            scope.showAvailability({
                                minBedroomsNumber: ui.values[0],
                                maxBedroomsNumber: ui.values[1]
                            });
                            scope.$apply()
                        }
                    });
                    jQuery("#streamlinecore_fw_bedrooms_number").val("Min Bed:" + scope.minBedroomsNumber + " - Max Bed:" + scope.maxBedroomsNumber)
                })
            }
        }
    });
    directives.directive("adultsrange", function($rootScope) {
        return {
            restrict: "A",
            scope: {
                showAvailability: "&",
                minAdultsNumber: "=",
                maxAdultsNumber: "="
            },
            link: function(scope, element, attrs, ngModelCtrl) {
                jQuery(function() {
                    element.slider({
                        range: true,
                        min: scope.minAdultsNumber,
                        max: scope.maxAdultsNumber,
                        step: 1,
                        values: [scope.minAdultsNumber, scope.maxAdultsNumber],
                        slide: function(event, ui) {
                            jQuery("#streamlinecore_fw_adults").val("Min Adults:" + ui.values[0] + " - Max Adults:" + ui.values[1])
                        },
                        change: function(event, ui) {
                            scope.showAvailability({
                                minAdultsNumber: ui.values[0],
                                maxAdultsNumber: ui.values[1]
                            });
                            scope.$apply()
                        }
                    });
                    jQuery("#streamlinecore_fw_adults").val("Min Adults:" + scope.minAdultsNumber + " - Max Adults:" + scope.maxAdultsNumber)
                })
            }
        }
    });
    directives.directive("modalcheckin", function($rootScope) {
        return {
            restrict: "A",
            scope: {
                showDays: "&",
                updatePrice: "&"
            },
            require: "ngModel",
            link: function(scope, element, attrs, ngModelCtrl) {
                jQuery(function() {
                    element.datepicker({
                        dateFormat: "mm/dd/yy",
                        minDate: "+1d",
                        onSelect: function(date) {
                            ngModelCtrl.$setViewValue(date);
                            scope.$apply();
                            var frm = new Date(date);
                            nts = 1;
                            if (!isNaN(jQuery("#modal_end_date").attr("data-min-stay"))) {
                                nts = jQuery("#modal_end_date").attr("data-min-stay")
                            }
                            var the_year = frm.getFullYear();
                            if (the_year < 2e3) the_year = 2e3 + the_year % 100;
                            var to = new Date(the_year, frm.getMonth(), parseInt(frm.getDate()) + parseInt(nts));
                            jQuery("#modal_end_date").datepicker("option", "minDate", to);
                            scope.updatePrice()
                        },
                        beforeShowDay: function(date) {
                            return scope.showDays({
                                date: date
                            })
                        }
                    })
                })
            }
        }
    });
    directives.directive("modalcheckout", function($rootScope) {
        return {
            restrict: "A",
            scope: {
                showDays: "&",
                updatePrice: "&"
            },
            require: "ngModel",
            link: function(scope, element, attrs, ngModelCtrl) {
                jQuery(function() {
                    element.datepicker({
                        dateFormat: "mm/dd/yy",
                        minDate: "+1d",
                        onSelect: function(date) {
                            ngModelCtrl.$setViewValue(date);
                            scope.$apply();
                            scope.updatePrice()
                        },
                        beforeShowDay: function(date) {
                            return scope.showDays({
                                date: date
                            })
                        }
                    })
                })
            }
        }
    });
    directives.directive("starRating", function() {
        return {
            restrict: "A",
            template: '<ul class="rating"><li ng-repeat="star in stars" ng-class="star"><i ng-if="star.filled" class="text-warning fa {[star.filled]}"></i></li></ul>',
            scope: {
                ratingValue: "=",
                max: "="
            },
            link: function(scope, elem, attrs) {
                scope.stars = [];
                for (var i = 0; i < scope.max; i++) {
                    var star = "fa-star-o";
                    if (i < scope.ratingValue) {
                        var modu = scope.ratingValue % 1;
                        if (i + 1 < scope.ratingValue) {
                            star = "fa-star"
                        } else {
                            if (modu != 0) {
                                if (modu <= .5) {
                                    star = "fa-star-o"
                                } else {
                                    star = "fa-star-half-o"
                                }
                            } else {
                                star = "fa-star"
                            }
                        }
                    }
                    scope.stars.push({
                        filled: star
                    })
                }
            }
        }
    });
    directives.directive("checkRequired", function() {
        return {
            restrict: "A",
            require: "ngModel",
            link: function(scope, element, attrs, ngModel) {
                ngModel.$validators.checkRequired = function(modelValue, viewValue) {
                    var value = modelValue || viewValue;
                    var match = scope.$eval(attrs.ngTrueValue) || true;
                    return value && match === value
                }
            }
        }
    })
})();
(function() {
    var Filters = angular.module("resortpro.filters", []);
    Filters.filter("trustedHtml", ["$sce", function($sce) {
        return function(text) {
            return $sce.trustAsHtml(text)
        }
    }]);
    Filters.filter("pluralizeRating", ["$sce", function($sce) {
        return function(rating) {
            return rating > 1 ? rating + " reviews" : rating + " review"
        }
    }])
})();
(function() {
    var mapLoaded = false;
    var app = angular.module("resortpro.property", ["resortpro.services", "resortpro.filters", "resortpro.directives", "ngCookies", "infinite-scroll","ngAnimate", "ui.bootstrap"]);
    var mod = angular.module("infinite-scroll", []);
    mod.directive("infiniteScroll", ["$rootScope", "$window", "$timeout", function($rootScope, $window, $timeout) {
        return {
            link: function(scope, elem, attrs) {
                var checkWhenEnabled, handler, scrollDistance, scrollEnabled;
                $window = angular.element($window);
                scrollDistance = 0;
                if (attrs.infiniteScrollDistance != null) {
                    scope.$watch(attrs.infiniteScrollDistance, function(value) {
                        return scrollDistance = parseInt(value, 10)
                    })
                }
                scrollEnabled = true;
                checkWhenEnabled = false;
                if (attrs.infiniteScrollDisabled != null) {
                    scope.$watch(attrs.infiniteScrollDisabled, function(value) {
                        scrollEnabled = !value;
                        if (scrollEnabled && checkWhenEnabled) {
                            checkWhenEnabled = false;
                            return handler()
                        }
                    })
                }
                handler = function() {
                    if (scope.enableInfinitiScroll) {
                        var elementBottom, remaining, shouldScroll, windowBottom;
                        windowBottom = $window.height() + $window.scrollTop();
                        elementBottom = elem.offset().top + elem.height();
                        remaining = elementBottom - windowBottom;
                        shouldScroll = remaining <= $window.height() * scrollDistance;
                        if (shouldScroll && scrollEnabled) {
                            if ($rootScope.$$phase) {
                                return scope.$eval(attrs.infiniteScroll)
                            } else {
                                return scope.$apply(attrs.infiniteScroll)
                            }
                        } else if (shouldScroll) {
                            return checkWhenEnabled = true
                        }
                    }
                };
                $window.on("scroll", handler);
                scope.$on("$destroy", function() {
                    return $window.off("scroll", handler)
                });
                return $timeout(function() {
                    if (attrs.infiniteScrollImmediateCheck) {
                        if (scope.$eval(attrs.infiniteScrollImmediateCheck)) {
                            return handler()
                        }
                    } else {
                        return handler()
                    }
                }, 0)
            }
        }
    }]);
    app.controller("PlusMinusControler", ["$scope","$rootScope", function($scope,$rootScope) {
        $scope.isMinusDisabled = false;
        $scope.isPlusDisabled  = false;
        $scope.area = undefined;
        $scope.areas = [{'name':'Appalachian Ski Mountain Cabin Rental','id':6289},{'name':'Banner Elk','id':13331},{'name':'Banner Elk Cabin Rental','id':8625},{'name':'Between Boone &amp; Blowing Rock Cabin Rental','id':8629},{'name':'Between Boone &amp; Valle Crucis (Willow Valley)','id':12142},{'name':'Blowing Rock','id':13332},{'name':'Blowing Rock Cabin Rental South Hwy 221','id':8627},{'name':'Blowing Rock Cabin Rental South Hwy 321','id':8628},{'name':'Blowing Rock in Town Vacation Rental','id':6291},{'name':'Blue Ridge Mountain Club Vacation Rental','id':8637},{'name':'Boone','id':13329},{'name':'Boone Cabin Rental Near Town','id':8626},{'name':'Boone Cabin Rental Shores Farm','id':8630},{'name':'Boone New River &amp; Jefferson Cabin Rental','id':7904},{'name':'Eagles Nest','id':13394},{'name':'Eagles Nest Resort near Banner Elk','id':13271},{'name':'Foscoe','id':13333},{'name':'Kerr Scott Lake Cabin Rental','id':8624},{'name':'Linville','id':13334},{'name':'Seven Devils Cabin Rental','id':6294},{'name':'Sugar Grove, Vilas &amp; Bethel Cabin Rental','id':6292},{'name':'Sugar Mountain','id':13330},{'name':'Todd','id':13326},{'name':'Valle Crucis','id':13325},{'name':'Valle Crucis Cabin Rental','id':6339},{'name':'Yonahlossee','id':13328},{'name':'Yonahlossee Vacation Rental','id':8632},{'name':'Zionville','id':13337}];
        $scope.locations = [

             {'name':'1 Abundant Life','id':174640},
             {'name':'1 Amazing View','id':174641},
             {'name':'1 Appalachian Sky','id':174825},
             {'name':'1 Awesome Skyview','id':174826},
             {'name':'1 Beautiful View','id':174642},
             {'name':'1 Million Dollar View','id':340923},
             {'name':'1 Musical View','id':353475},
             {'name':'1 Of A Kind','id':174657},
             {'name':'1 Sublime View','id':355201},
             {'name':'1 Sweet Seclusion','id':174650},
             {'name':'1-2 Remember','id':174635},
             {'name':'2 Beautiful 4 Words','id':174652},
             {'name':'2 Cubs Cabin','id':361714},
             {'name':'3 Peaks Lodge','id':174662},
             {'name':'36 North','id':174658},
             {'name':'4 Seasons Escape','id':304302},
             {'name':'4330 Elevation','id':349682},
             {'name':'4J Getaway','id':174663},
             {'name':'5 OClock Somewhere','id':174668},
             {'name':'7 Bears Lodge','id':354529},
             {'name':'7th Heaven','id':174670},
             {'name':'A Bears Eye View','id':174672},
             {'name':'A Bears Hill','id':174742},
             {'name':'A Bella Vista','id':174470},
             {'name':'A Big View','id':174673},
             {'name':'A Birds Eye View','id':174674},
             {'name':'A Family Tradition','id':174675},
             {'name':'A Great Catch','id':174677},
             {'name':'A Happy Roost','id':174678},
             {'name':'A Haven of Rest','id':174679},
             {'name':'A High Country Retreat','id':174680},
             {'name':'A Honeybear Heaven','id':174681},
             {'name':'A Moon River View','id':174682},
             {'name':'A Mountain Dream','id':353419},
             {'name':'A Mountain Hideaway','id':174684},
             {'name':'A Nest With a View','id':288236},
             {'name':'A Paradise Found','id':174685},
             {'name':'A Parkway Cabin','id':174686},
             {'name':'A Peak of Heaven','id':174687},
             {'name':'A Perfect Retreat','id':174688},
             {'name':'A Point of View','id':174689},
             {'name':'A Positive Outlook','id':174690},
             {'name':'A River Mist','id':174691},
             {'name':'A River Mist Too','id':174692},
             {'name':'A River Mist Walk','id':174696},
             {'name':'A River Runs Through It','id':174697},
             {'name':'A Riversound','id':312261},
             {'name':'A Slopeside Getaway','id':174700},
             {'name':'A Stones Throw','id':174701},
             {'name':'A Sunset View','id':312082},
             {'name':'A Sweet Carolina Home','id':357172},
             {'name':'A Sweet Retreat','id':313043},
             {'name':'A Treetop Escape','id':253033},
             {'name':'A View to Remember','id':174703},
             {'name':'A Walk Through the Clouds','id':174705},
             {'name':'A Watauga River Lookout','id':253300},
             {'name':'Above it All','id':174706},
             {'name':'Absolute Paradise','id':174707},
             {'name':'Acorn Lodge','id':174708},
             {'name':'Adventure Hideaway at Eagles Nest','id':174709},
             {'name':'Agape Cove','id':174710},
             {'name':'Aho Gap Lodge','id':174711},
             {'name':'Almost Heaven','id':354393},
             {'name':'Almost Perfect','id':354449},
             {'name':'Alpenglow','id':266727},
             {'name':'Alpine Lodge','id':174714},
             {'name':'Alpine Vista','id':174715},
             {'name':'Altitude Adjustment','id':174716},
             {'name':'Altitudes Attitude','id':174717},
             {'name':'Amen Corner','id':174719},
             {'name':'Amitola','id':174720},
             {'name':'Among the Trees','id':174721},
             {'name':'An Irish Blessing','id':174722},
             {'name':'Andrews River Haven','id':354412},
             {'name':'Anglers Cabin','id':174724},
             {'name':'Antlers Lodge','id':322107},
             {'name':'AppalJack Retreat','id':174728},
             {'name':'Appalachian Adventure','id':174726},
             {'name':'Appalachian Retreat','id':174729},
             {'name':'Apple of my Eye','id':174730},
             {'name':'Aspen Memories','id':312899},
             {'name':'Aspen View','id':174734},
             {'name':'At Turtle Ridge','id':174736},
             {'name':'Atop Boone','id':174737},
             {'name':'Aussies Den','id':174738},
             {'name':'Azalea Hill','id':174739},
             {'name':'Bairds Creek Cabin','id':354413},
             {'name':'Balloon Landing','id':174740},
             {'name':'Banner View','id':367960},
             {'name':'Bear Bungalow','id':174741},
             {'name':'Bear N Grace','id':313351},
             {'name':'Bear Pause','id':174743},
             {'name':'Bears Repeatin','id':174744},
             {'name':'Beech Haven','id':344046},
             {'name':'Beech View Lodge','id':354445},
             {'name':'Berkshires at Chetola','id':174746},
             {'name':'Big Bear Lodge','id':354414},
             {'name':'Black Bear Lodge','id':354415},
             {'name':'Blackberry Creek Cabin','id':174747},
             {'name':'Blue Ridge Retreat at The Farms','id':354461},
             {'name':'Blue Ridge Shangri La II','id':354417},
             {'name':'Boles Lodge','id':174748},
             {'name':'Boulder Pod: Hidden Nite','id':368014},
             {'name':'Boulder Pod: Rocky Top','id':368001},
             {'name':'Boulder Pod: West Glow','id':368011},
             {'name':'Boulder Ridge','id':354447},
             {'name':'Boulder View','id':354457},
             {'name':'Bridgepoint Cabin','id':354416},
             {'name':'Brookshire Cabin','id':354459},
             {'name':'Buena Vista','id':354418},
             {'name':'Cabin Fever','id':174753},
             {'name':'Canoe Run','id':368087},
             {'name':'Cardinals Nest','id':368116},
             {'name':'Carolina Charm','id':174754},
             {'name':'Castle Rock at Eagles Nest','id':360523},
             {'name':'Cats Creek Cabin','id':354419},
             {'name':'Celestial View','id':174755},
             {'name':'Celtic Mist','id':354420},
             {'name':'Chestnut Lodge','id':174756},
             {'name':'Chetola: Cardinal 101','id':174758},
             {'name':'Chetola: Wren 301','id':174759},
             {'name':'Comptime','id':174760},
             {'name':'Copperleaf at Eagles Nest','id':354448},
             {'name':'Cozy Twin Rivers Edge','id':310905},
             {'name':'Creekside Cabin at Eagles Nest','id':348853},
             {'name':'Crosswind','id':174764},
             {'name':'Cruizin River Dreams','id':354421},
             {'name':'Crystal View','id':254403},
             {'name':'D Coys Nest','id':354469},
             {'name':'Dancing Bear Cottage','id':174767},
             {'name':'Daniel Boone Lodge','id':174768},
             {'name':'Deer Hollow Retreat','id':238223},
             {'name':'Deer Run','id':174769},
             {'name':'Deerview Cottage','id':367169},
             {'name':'Diamond Creek Lodge','id':174770},
             {'name':'Double Eagle Lodge: Bear Suite','id':367962},
             {'name':'Double Eagle Lodge: Buck Suite','id':368020},
             {'name':'Double Eagle Lodge: Owl Suite','id':368033},
             {'name':'Double Eagle Lodge: Wolf Suite','id':368034},
             {'name':'Draggin Fly','id':285139},
             {'name':'Dream Forest','id':206360},
             {'name':'Eagles Long View Lodge','id':341010},
             {'name':'East Meets West','id':284054},
             {'name':'Elk Camp Lodge','id':354451},
             {'name':'Emerald View','id':357363},
             {'name':'Falling Waters','id':174774},
             {'name':'Farallon','id':354423},
             {'name':'Fern Ridge Lodge','id':274273},
             {'name':'Fiddlestix at Yonahlossee','id':354424},
             {'name':'Firefly Cabin','id':322974},
             {'name':'Four Seasons','id':357907},
             {'name':'Grand View','id':203352},
             {'name':'Grandfather Vistas','id':174779},
             {'name':'Grandview Getaway','id':367186},
             {'name':'Grapevine Cottage','id':174780},
             {'name':'Gratitude','id':174781},
             {'name':'Great Escape','id':354425},
             {'name':'Hangin Out','id':174783},
             {'name':'Happy Ours','id':174784},
             {'name':'Hawks View Lodge','id':322770},
             {'name':'Heart Rock Lodge','id':354427},
             {'name':'Heather Heights Cottage','id':349523},
             {'name':'Hebron Falls','id':354428},
             {'name':'Hemlock Hideaway','id':174786},
             {'name':'Hidden Ridge','id':174787},
             {'name':'Hideaway Mountain','id':174788},
             {'name':'Highland Mist','id':354429},
             {'name':'Honey Bear Haven','id':354450},
             {'name':'Hummingbird Hollow','id':354426},
             {'name':'I Cant Believe Its Not Heaven','id':174791},
             {'name':'Innspiration','id':174792},
             {'name':'Katydid','id':354455},
             {'name':'Little Creek Lodge','id':174793},
             {'name':'Lois Lane','id':359248},
             {'name':'Longview at Eagles Nest','id':354456},
             {'name':'Lookout Lodge','id':354511},
             {'name':'Love Hollow','id':174846}
        ]

        $scope.plus = function(max, type) {

            if (type == "search.occupants") {
                
                if ($scope.search.occupants == max) {$scope.isPlusDisabled = true; $scope.isMinusDisabled = false; } else {
                    $scope.search.occupants++
                    $scope.isPlusDisabled = false;
                    $scope.isMinusDisabled = false;
                }
            }
            if (type == "inquiry_occupants") {
                $scope.inquiry.occTotal = parseInt($scope.inquiry.occupantsSmall) + parseInt($scope.inquiry.occupants);
                if ($scope.inquiry.occTotal == max) { $scope.isPlusDisabled = true; $scope.isMinusDisabled = false; } else {
                    $scope.inquiry.occupants++
                    $scope.isPlusDisabled = false;
                    $scope.isMinusDisabled = false;
                }
            }
            if (type == "modal_occupants") {
                $scope.occTotal = parseInt($scope.modal_occupants_small) + parseInt($scope.modal_occupants);
                if ($scope.occTotal == max) { $scope.isPlusDisabled = true; $scope.isMinusDisabled = false; } else {
                    $scope.modal_occupants++
                    $scope.isPlusDisabled = false;
                    $scope.isMinusDisabled = false;
                }
            }
            if (type == "inquiry_occupants_small") {
                $scope.inquiry.occTotal = parseInt($scope.inquiry.occupantsSmall) + parseInt($scope.inquiry.occupants);
                if ($scope.inquiry.occTotal == max) { $scope.isPlusDisabled = true; $scope.isMinusDisabled = false; } else {
                    $scope.inquiry.occupantsSmall++
                    $scope.isPlusDisabled = false;
                    $scope.isMinusDisabled = false;
                }
            }
            if (type == "search.occupants_small") {
                if ($scope.search.occupants_small == max) { $scope.isPlusDisabled = true; $scope.isMinusDisabled = false; } else {
                    $scope.search.occupants_small++
                    $scope.isPlusDisabled = false;
                    $scope.isMinusDisabled = false;
                }
            }
            if (type == "modal_occupants_small") {
                $scope.occTotal = parseInt($scope.modal_occupants_small) + parseInt($scope.modal_occupants);
                if ($scope.occTotal == max) { $scope.isPlusDisabled = true; $scope.isMinusDisabled = false; } else {
                    $scope.modal_occupants_small++
                    $scope.isPlusDisabled = false;
                    $scope.isMinusDisabled = false;
                }
            }
            if (type == "search.pets") {
                $scope.search.pets = 1;
                /*if ($scope.search.pets == max) {} else {
                    $scope.search.pets++
                }*/
            }
            if (type == "modal_pets") {
                if ($scope.modal_pets == max) { $scope.isPlusDisabled = true; $scope.isMinusDisabled = false; } else {
                    $scope.modal_pets++
                    $scope.isPlusDisabled = false;
                    $scope.isMinusDisabled = false
                }
            }
            if (type == "inquiry_pets") {
                if ($scope.inquiry.pets == max) { $scope.isPlusDisabled = true; $scope.isMinusDisabled = false; } else {
                    $scope.inquiry.pets++
                    $scope.isPlusDisabled = false;
                    $scope.isMinusDisabled = false
                }
            }
            if (type == "search.num_bedrooms") {
                if ($scope.search.num_bedrooms == max) { $scope.isPlusDisabled = true; $scope.isMinusDisabled = false; } else {
                    $scope.search.num_bedrooms++
                    $scope.isPlusDisabled = false;
                    $scope.isMinusDisabled = false;
                }
            }
        };
        $scope.minus = function(min, type) {

            if (type == "search.occupants") {
                if ($scope.search.occupants == min) {
                    $scope.search.occupants = ""
                    $scope.isMinusDisabled = true
                    $scope.isPlusDisabled  = false
                } else if ($scope.search.occupants == 0 || $scope.search.occupants == null) {$scope.search.occupants = ""} else {
                    if($scope.search.occupants == 1){
                       $scope.search.occupants = "" 
                    }else{
                        $scope.search.occupants--
                        $scope.isMinusDisabled = false;
                        $scope.isPlusDisabled = false;
                    }
                   
                }
            }
            if (type == "inquiry_occupants") {
                if ($scope.inquiry.occupants == min) {
                    $scope.inquiry.occupants = ""
                    $scope.isMinusDisabled = true
                    $scope.isPlusDisabled  = false
                } else if ($scope.inquiry.occupants == 0) {$scope.inquiry.occupants = ""} else {
                    $scope.inquiry.occupants--
                    $scope.isMinusDisabled = false;
                    $scope.isPlusDisabled = false;
                }
            }
            if (type == "modal_occupants") {
                if ($scope.modal_occupants == min) {
                    $scope.modal_occupants = ""
                    $scope.isMinusDisabled = true
                    $scope.isPlusDisabled  = false
                } else if ($scope.modal_occupants == 0) {$scope.modal_occupants = ""} else {
                    $scope.modal_occupants--
                    $scope.isMinusDisabled = false;
                    $scope.isPlusDisabled = false;
                }
            }
            if (type == "inquiry_occupants_small") {
                if ($scope.inquiry.occupantsSmall == min) {
                    $scope.inquiry.occupantsSmall = ""
                    $scope.isMinusDisabled = true
                    $scope.isPlusDisabled  = false
                }
                else if ($scope.inquiry.occupantsSmall == 0) {$scope.inquiry.occupantsSmall = ""} else {

                    if($scope.inquiry.occupantsSmall == 1){
                        $scope.inquiry.occupantsSmall = ""
                    }else{
                        $scope.inquiry.occupantsSmall--
                        $scope.isMinusDisabled = false
                        $scope.isPlusDisabled = false;
                    }
                   
                }
            }
            if (type == "search.occupants_small") {
                console.log($scope.search.occupants_small);
                if ($scope.search.occupants_small == min) {
                    $scope.search.occupants_small = ""
                    $scope.isMinusDisabled = true
                    $scope.isPlusDisabled  = false
                } else if ($scope.search.occupants_small == 0 || $scope.search.occupants_small == null) {$scope.search.occupants_small = ""} else {
                    if($scope.search.occupants_small == 1){
                       $scope.search.occupants_small = ""; 
                    }else{
                      $scope.search.occupants_small--
                      $scope.isMinusDisabled = false;
                      $scope.isPlusDisabled = false; 
                    }
                    
                }
            }
            if (type == "modal_occupants_small") {
                if ($scope.modal_occupants_small == min) {
                    $scope.modal_occupants_small = ""
                    $scope.isMinusDisabled = true
                    $scope.isPlusDisabled  = false
                } else if ($scope.modal_occupants_small == 0) {$scope.modal_occupants_small = ""} else {
                    $scope.modal_occupants_small--
                    $scope.isMinusDisabled = false
                    $scope.isPlusDisabled = false;
                }
            }
            if (type == "search.pets") {
                $scope.search.pets = 0;
                /*if ($scope.search.pets == min) {
                    $scope.search.pets = null
                } else if ($scope.search.pets == 0 || $scope.search.pets == null) {} else {
                    $scope.search.pets--
                }*/
            }
            if (type == "modal_pets") {
                if ($scope.modal_pets == min) {
                    $scope.modal_pets = ""
                    $scope.isMinusDisabled = true
                    $scope.isPlusDisabled  = false
                } else if ($scope.modal_pets == 0) {$scope.modal_pet = ""} else {
                    $scope.modal_pets--
                    $scope.isMinusDisabled = false;
                    $scope.isPlusDisabled = false;
                }
            }
            if (type == "inquiry_pets") {
                if ($scope.inquiry.pets == min) {
                    $scope.inquiry.pets = ""
                    $scope.isMinusDisabled = true
                    $scope.isPlusDisabled  = false
                } else if ($scope.inquiry.pets == 0) {$scope.inquiry.pets = ""} else {
                    if($scope.inquiry.pets == 1){
                        $scope.inquiry.pets == "";
                    }else{
                        $scope.inquiry.pets--
                        $scope.isMinusDisabled = false
                        $scope.isPlusDisabled = false;
                    }
                    
                }
            }
            if (type == "search.num_bedrooms") {
                if ($scope.search.num_bedrooms == min) {
                    $scope.search.num_bedrooms = ""
                    $scope.isMinusDisabled = true
                    $scope.isPlusDisabled  = false
                } else if ($scope.search.num_bedrooms == 0 || $scope.search.num_bedrooms == null) {$scope.search.num_bedrooms = ""} else {
                    if($scope.search.num_bedrooms == 1){
                       $scope.search.num_bedrooms = ""
                    }else{
                       $scope.search.num_bedrooms--
                       $scope.isMinusDisabled = false
                       $scope.isPlusDisabled = false;
                    }
                   
                }
            }
        };
        $scope.resetGuests = function() {
            $scope.search.occupants = "";
            $scope.search.occupants_small = "";
            $scope.search.pets = "";
            $scope.search.num_bedrooms = "";
            jQuery('input[name="pets"]').removeAttr("checked");  
        };

        $scope.closeGuests = function() {
            $scope.class = "hide.bs.dropdown"
        }

        $scope.autocompletesearch = function(options) {
            console.log(JSON.stringify(options));
        }

        $scope.getAreas = function(value){
            if($scope.area){
                for(let i=0; i<data.length; i++){
                    if(data[i].name.startsWith($scope.area)){
                        $scope.areas.push(data[i]);
                    }
                }
            }
        }

        $scope.onLocationSelect = function(id){
           jQuery('#area_id').val(id);
        }

        $scope.onSearchSelect  = function(id){
        	jQuery('#resortpro_sw_bed').val(id);
        	jQuery("#resortpro_sw_bed").val(id).trigger("chosen:updated");
        	setTimeout(function(){
               jQuery('#resortpro_sw_bed').parents('form').submit();
        	},500)
        	
        }

    }]);
    app.controller("PropertyController", ["$scope", "$rootScope", "$sce", "$http", "$window", "$filter", "Alert", "rpapi", "rpuri", "$cookies", "$templateCache", "$location", function($scope, $rootScope, $sce, $http, $window, $filter, Alert, rpapi, rpuri, $cookies, $templateCache, $location) {
        $rootScope.properties = {};
        $rootScope.propList = {};
        $rootScope.rates_details = [];
        $rootScope.amenities = [];
        $rootScope.rates2 = [];
        $rootScope.calendar = [];
        $rootScope.calendar2 = {};
        $rootScope.groups = [];
        $scope.loading = true;
        $scope.foundUnits = true;
        $scope.minPrice = 0;
        $scope.maxPrice = 500;
        $scope.maxOccupants = 0;
        $scope.autoZoom = 0;
        $scope.bedroomsNumber = "";
        $scope.neighborhood = "";
        $scope.viewname = "";
        $scope.locationAreaId = "";
        $scope.mapEnabled = false;
        $scope.mapSearch = false;
        $scope.inquiryOnly = false;
        $scope.showMoreButton = true;
        $scope.startDate = $filter("date")(rpuri.getQueryStringParam("sd"), "MM/dd/yyyy");
        $scope.endDate = $filter("date")(rpuri.getQueryStringParam("ed"), "MM/dd/yyyy");
        $scope.occupants = rpuri.getQueryStringParam("oc");
        $scope.plusLogic = 0;
        $scope.isFitBounds = false;
        $scope.skipUnits = "";
        $scope.showDays = true;
        $scope.modal_total_reservation = 0;
        $scope.total_pages = 0;
        $scope.total_units = 0;
        $scope.daysDiff = 0;
        $scope.method = "";
        $scope.wishlist = [];
        $scope.foundCalendarBooking = false;
        $scope.maxCalendarDate = null;
        $scope.isAvailabilitySearch = false;
        $scope.currentPage = 1;
        $scope.enableInfinitiScroll = false;
        $scope.showAllClicked = false
        var map;
        var markerList = {};
        var arrMarkers = [];
        var infowindow;
        var marker;
        var bounds;
        $scope.loadingShow = "true"
        $scope.enabledlistview = "false"
        $scope.loadMoreShow = "false"
        $scope.showfilter = false;
        $scope.showclearbtn = false;
        $scope.isDataShow = "true";
        $scope.view = "gridview";
        $rootScope.propertiesObj = [];
        $scope.result = [];
        
 
        $scope.isString = function(val, allowEmpty) {
            if (angular.isString(val)) {
                if (allowEmpty) {
                    return true
                } else {
                    if (val != "") {
                        return true
                    }
                }
            }
            return false
        };
        $scope.checkString = function(val, allowEmpty) {
            if (angular.isString(val)) {
                if (allowEmpty) {
                    return true
                } else {
                    if (val != "") {
                        return true
                    }
                }
            }
            return false
        };
        $scope.checkNumber = function(val, allowZero) {
            if (angular.isNumber(val)) {
                if (allowZero) {
                    return true
                } else {
                    if (val > 0) {
                        return true
                    }
                }
            } else {
                if (val && val !== null) {
                    if (val.length > 0) {
                        if (!isNaN(val)) {
                            return true
                        }
                    }
                }
            }
            return false
        };
        $scope.isNumber = function(val, allowZero) {
            if (angular.isNumber(val)) {
                if (allowZero) {
                    return true
                } else {
                    if (val > 0) {
                        return true
                    }
                }
            } else {
                if (val && val !== null) {
                    if (val.length > 0) {
                        if (!isNaN(val)) {
                            return true
                        }
                    }
                }
            }
            return false
        };
        $scope.isArray = angular.isArray;
        if ($rootScope.searchSettings.enable_save_unit_place == 1) {
            var pagination_search_number = $rootScope.searchSettings.propertyPagination;
            var cookiePageObj = jQuery($cookies.get("sl_current_page"));
            jQuery(".filter-widget input, .filter-widget select").on("click", function() {
                $scope.deleteCookiesFilters();
                $cookies.remove("sl_current_page", {
                    path: "/"
                })
            });
            if (cookiePageObj.selector != "") {
                pagination_search_number = cookiePageObj.selector * pagination_search_number
            } else {
                pagination_search_number = $rootScope.searchSettings.propertyPagination
            }
        }
        $scope.initializeData = function() {
            $scope.initializeMap();
        };
        $scope.initializeMap = function() {
            $scope.mapSearchEnabled = false;
            $scope.mapEnabled = true;
            $scope.$on("mapInitialized", function(evt, evtMap) {
                map = evtMap;
                bounds = map.getBounds()
            })
        };
        $scope.toggleMapSearch = function() {
            if ($scope.mapSearchEnabled == false) {
                $scope.mapSearchEnabled = true
            } else {
                $scope.mapSearchEnabled = false
            }
        };
        $scope.goToProperty = function(seo_page_name, sd, ed, adults, children, pets, sale, bedrooms_number, home_type, area, neighborhood, location_resort, view, group_type) {
            var url = $rootScope.propertyUrl + seo_page_name;
            if ("1" == $rootScope.useHTML) url = url + ".html";
            var query_string = "";
            if (sd != undefined && sd != "") query_string += "sd=" + encodeURIComponent(sd) + "&";
            if (ed != undefined && ed != "") query_string += "ed=" + encodeURIComponent(ed) + "&";
            if (adults != undefined && adults != "") query_string += "oc=" + encodeURIComponent(adults) + "&";
            if (children != undefined && children != "") query_string += "ch=" + encodeURIComponent(children) + "&";
            if (pets != undefined && pets != "") query_string += "pets=" + encodeURIComponent(pets) + "&";
            if (sale != undefined && sale == "yes") query_string += "sale=1";
            if (bedrooms_number != undefined && bedrooms_number != "") query_string += "beds=" + encodeURIComponent(bedrooms_number) + "&";
            if (home_type != undefined && home_type != "") query_string += "property_type_id=" + encodeURIComponent(home_type) + "&";
            if (area != undefined && area != "") query_string += "area_id=" + encodeURIComponent(area) + "&";
            if (neighborhood != undefined && neighborhood != "") query_string += "neighborhood_area_id=" + encodeURIComponent(neighborhood) + "&";
            if (location_resort != undefined && location_resort != "") query_string += "resort_area_id=" + encodeURIComponent(location_resort) + "&";
            if (view != undefined && view != "") query_string += "view_name=" + encodeURIComponent(view) + "&";
            if (group_type != undefined && group_type != "") query_string += "group_id=" + encodeURIComponent(group_type) + "&";
            if (query_string != "") url += "?" + query_string.replace(/&+$/, "");
            return encodeURI(url)
        };
        $scope.checkSorting = function() {
            
            if ($scope.sortBy == "occupants") {
                $scope.sort = true
            }
            if ($scope.sortBy == "occupants_low") {
                $scope.sort = false
            }
            if ($scope.sortBy == "price") {
                $scope.sort = true
            }
            if ($scope.sortBy == "price_low") {
                $scope.sort = false
            }
            if ($scope.sortBy == "pets") {

                $scope.sort = true
            }
            if ($scope.sortBy == "name") {
                $scope.sort = false
            }
            if ($scope.sortBy == "bedrooms_number") {
                $scope.sort = true
            }
            if ($scope.sortBy == "bedrooms_number_low") {
                $scope.sort = false
            }
        };
        $scope.customSorting = function(property) {
            if ($scope.sortBy == "occupants" || $scope.sortBy == "occupants_low") {
                return property.max_occupants
            } else if ($scope.sortBy == "bedrooms_number" || $scope.sortBy == "bedrooms_number_low") {
                return property.bedrooms_number
            } else if ($scope.sortBy == "bathrooms_number") {
                return property.bathrooms_number
            } else if ($scope.sortBy == "name") {
                return property.location_name
            } else if ($scope.sortBy == "area") {
                return property.square_foots
            } else if ($scope.sortBy == "view") {
                return property.view_name
            } else if ($scope.sortBy == "price_low" || $scope.sortBy == "price") {
                if ($scope.method != "GetPropertyAvailabilityWithRatesWordPress") {
                    return property.price_data.daily
                } else {
                    return property.total
                }
            } else if ($scope.sortBy == "pets") {
                return property.max_pets > 0
            } else {
                return []
            }
        };
        $scope.getUnitName = function(unit) {
            if ($scope.isString(unit.web_name) && unit.web_name != "") {
                return unit.web_name
            } else {
                if ($scope.isString(unit.location_name) && (unit.name == "" || unit.name == "Home")) {
                    return unit.location_name
                } else {
                    return unit.name
                }
            }
        };
        $scope.getUnitPrice = function(unit) {};
        $scope.calculateMarkup = function(strPrice) {
            var price = strPrice;
            if (typeof strPrice == "string") {
                price = parseFloat(strPrice.replace("$", "").replace(",", ""))
            }
            if ($rootScope.rateMarkup > 0) {
                var pct = 1 + parseFloat($rootScope.rateMarkup) / 100;
                price = price * pct
            }
            return price
        };
        $scope.disableMapSearch = function() {
            $scope.mapSearchEnabled = false;
            $scope.availabilitySearch($scope.search)
        };
        $scope.clearProperties = function() {
            $rootScope.propList = [];
            $rootScope.properties = []
        };
        $scope.isEmptyString = function(obj) {
            return !(obj != undefined && obj != "")
        };
        $scope.isEmptyObject = function(obj) {
            return angular.equals({}, obj) || obj == null
        };
        $scope.isString = function(item) {
            return angular.isString(item)
        };
        $scope.loadMarkers = function(properties, setBounds) {
            if ($scope.mapEnabled) {
                angular.forEach(properties, function(property) {
                    if (!isNaN(property.location_latitude) && !isNaN(property.location_longitude)) {
                        var marker = {
                            id: property.id,
                            name: property.location_name,
                            latitude: property.location_latitude,
                            longitude: property.location_longitude,
                            image: property.default_thumbnail_path,
                            beds: property.bedrooms_number,
                            baths: property.bathrooms_number,
                            guests: property.max_occupants,
                            seo_page_name: property.seo_page_name
                        };
                        if ($scope.method == "GetPropertyAvailabilityWithRatesWordPress") {
                            marker["price"] = property.total
                        } else {
                            marker["price"] = property.price_data
                        }
                        if (map != undefined) {
                            var latLong = new google.maps.LatLng(property.location_latitude, property.location_longitude);
                            bounds.extend(latLong);
                            $scope.loadMarker(marker)
                        } else {
                            setTimeout(function() {
                                if (map != undefined) {
                                    var latLong = new google.maps.LatLng(property.location_latitude, property.location_longitude);
                                    bounds.extend(latLong);
                                    $scope.loadMarker(marker)
                                }
                            }, 2e3)
                        }
                    }
                });
                if (map != undefined && setBounds) {
                    $scope.isFitBounds = true;
                    map.fitBounds(bounds);
                    map.setCenter(bounds.getCenter());
                    $scope.isFitBounds = false
                }
            }
        };

        $scope.deleteCookiesFilters = function() {
            $cookies.remove("unit_id", {
                path: "/"
            })
        };
        $scope.savePagination = function() {
            var savePagination = $cookies.getObject("sl_current_page")
        };
        $scope.saveUnitId = function() {
            var saveUnitId = $cookies.getObject("unit_id")
        };
        $scope.loadMore = function() {
            $scope.loadMoreShow = "true";
            var size = $rootScope.searchSettings.propertyPagination;
            $scope.currentPage++;
            $scope.limit += $rootScope.searchSettings.propertyPagination;
            var params = $scope.getParams();
            $scope.searchProperties(params, size, $scope.currentPage, false);
            if ($rootScope.searchSettings.enable_save_unit_place == 1) {
                var cookiePageObj = jQuery($cookies.get("sl_current_page"));
                if (cookiePageObj.selector != "") {
                    $cookies.putObject("sl_current_page", parseInt(cookiePageObj.selector) + 1, {
                        path: "/"
                    })
                } else {
                    $cookies.putObject("sl_current_page", $scope.currentPage, {
                        path: "/"
                    })
                }
            }
        };
        if ($rootScope.searchSettings.enable_save_unit_place == 1) {
            jQuery(document).on("click", ".listing", function() {
                var the_unit_link = jQuery(this).attr("id").split("-");
                var the_unit_id = the_unit_link.pop();
                $cookies.putObject("unit_id", the_unit_id, {
                    path: "/"
                })
            })
        }
        if ($rootScope.searchSettings.enable_save_unit_place == 0) {
            $scope.deleteCookiesFilters()
        }
        $scope.prepareMarker = function(property, marker) {
            var ne = map.getBounds().getNorthEast();
            var sw = map.getBounds().getSouthWest();
            if (property.location_latitude >= sw.lat() && property.location_latitude <= ne.lat() && property.location_longitude >= sw.lng() && property.location_longitude <= ne.lng()) {
                $scope.loadMarker(marker)
            }
        };
        $scope.getPropertyInfo = function() {
            rpapi.getWithParams("GetPropertyInfo", {
                unit_id: $scope.propertyId
            }).success(function(obj) {
                $scope.property = obj.data;
                $scope.latitude = obj.data.latitude;
                $scope.longitude = obj.data.longitude;
                $scope.$on("mapInitialized", function(evt, evtMap) {
                    map = evtMap;
                    var myLatlng = {
                        lat: obj.data.latitude,
                        lng: obj.data.longitude
                    };
                    map.setCenter(myLatlng)
                })
            })
        };
        $scope.getPropertyImages = function(unit_id) {
            rpapi.getWithParams("GetPropertyGalleryImages", {
                unit_id: unit_id
            }).success(function(obj) {
                $scope.images = obj.data.image
            })
        };

        $scope.getPropertyCustomFeatured = function(unit_id) {
            rpapi.getWithParams("GetPropertyCustomFields", {
                unit_id: $scope.propertyId
            }).success(function(cst_fields) {
                $scope.data = cst_fields.data;


                   angular.forEach(cst_fields.data['field'], function(c_field, i) {
                    field_custom_name = c_field.name;
                    field_custom_value = c_field.value;
                     //    console.log(field_custom_name);
                     // console.log(field_custom_value);
                     
                    if(field_custom_name == 'Featured' && field_custom_value == "yes"){
                        $scope.custom_featured_field = field_custom_value;

                    }

                });

            })

        };
        $scope.getPropertyCustomSpecial = function(unit_id) {
            rpapi.getWithParams("GetPropertyCustomFields", {
                unit_id: $scope.propertyId
            }).success(function(cst_fields) {
                $scope.data = cst_fields.data;
                   angular.forEach(cst_fields.data['field'], function(c_field, i) {
                    field_custom_name = c_field.name;
                    field_custom_value_c = c_field.value;
                    if(field_custom_name == 'Special' && !$scope.isEmptyObject(field_custom_value_c) ){
                        $scope.custom_special_field = field_custom_value_c;

                    }

                });

            })

        };
        $scope.setAmenityFilter = function(amenityId) {
            run_waitMe(".listings_wrapper_box", "bounce", "Updating Results");
            setTimeout(function() {
                hide_waitMe(".listings_wrapper_box")
            }, 500);
            if ($scope.amenity[amenityId]) {
                $rootScope.amenities.push(amenityId)
            } else {
                var index = $rootScope.amenities.indexOf(amenityId);
                if (index > -1) {
                    $rootScope.amenities.splice(index, 1)
                }
            }
            searchParam = $location.search();
            if ($rootScope.amenities.length) {
                searchParam["amenities"] = $rootScope.amenities.join(",")
            } else {
                searchParam["amenities"] = null
            }
            $location.search(searchParam)
        };

        $scope.setAmenityFilterOr = function(amenityId, group) {
            run_waitMe(".listings_wrapper_box", "bounce", "Updating Results");
            setTimeout(function() {
                hide_waitMe(".listings_wrapper_box")
            }, 500);
            var amenityFound = false;
            if (!$rootScope.groups.length > 0) {
                var gitem = {
                    name: group,
                    amenities: [amenityId]
                };
                $rootScope.groups.push(gitem)
            } else {
                var removeFromArray = false;
                var indexToRemove = 0;
                angular.forEach($rootScope.groups, function(amenity, key) {
                    if ($scope.amenityOr[amenityId]) {
                        if (amenity.name == group) {
                            amenityFound = true;
                            amenity.amenities.push(amenityId)
                        }
                    } else {
                        if (amenity.name == group) {
                            amenityFound = true;
                            var index = amenity.amenities.indexOf(amenityId);
                            if (index > -1) {
                                amenity.amenities.splice(index, 1)
                            }
                            if (amenity.amenities.length == 0) {
                                removeFromArray = true;
                                indexToRemove = key
                            }
                        }
                    }
                });
                if (!amenityFound) {
                    var gitem = {
                        name: group,
                        amenities: [amenityId]
                    };
                    $rootScope.groups.push(gitem)
                }
                if (removeFromArray) {
                    $rootScope.groups.splice(indexToRemove, 1)
                }
            }
            searchParam = $location.search();
            if (typeof searchParam["amenities"] == "undefined") {
                amenities = []
            } else {
                amenities = searchParam["amenities"].split(",")
            }
            amenityIdValue = $scope.amenityOr[amenityId];
            amenityIdPosition = amenities.indexOf(amenityId + "");
            if (amenityIdValue == false && amenityIdPosition > -1) {
                amenities.splice(amenityIdPosition, 1)
            } else {
                amenities.push(amenityIdValue)
            }
            if (amenities.length) {
                searchParam["amenities"] = amenities.join(",")
            } else {
                searchParam["amenities"] = null
            }
            $location.search(searchParam)
        };

        $scope.amenityFilter = function(item) {
            var totalAmenities = $rootScope.amenities.length;
            var i = 0;
            angular.forEach($rootScope.amenities, function(aId) {

                angular.forEach(item.unit_amenities.amenity, function(uaId) {

                    if (aId == uaId.amenity_id ) {
                        i++
                    }
                })
            });
            if (totalAmenities == i) {
                return true
            } else {
                return false
            }
        };

        $scope.amenityFilterOr = function(item) {
            var result = true;
            if ($rootScope.groups.length > 0) {
                result = false
            }
            var totalGroups = $rootScope.groups.length;
            var groupsFound = 0;
            angular.forEach($rootScope.groups, function(group) {
                var keepGoing = true;
                angular.forEach(group.amenities, function(amenity) {
                    angular.forEach(item.unit_amenities.amenity, function(ua) {
                        if (keepGoing) {
                            if (ua.amenity_id == amenity) {
                                groupsFound++;
                                keepGoing = false
                            }
                        }
                    })
                })
            });
            return totalGroups == groupsFound
        };
        $scope.getPropertyAmenities = function() {
            rpapi.getWithParams("GetPropertyAmenities", {
                unit_id: $scope.propertyId
            }).success(function(obj) {
                $scope.amenities = obj.data.amenity
            })
        };
        $scope.getLocations = function() {
            rpapi.get("GetLocationAreasList").success(function(obj) {
                $scope.locations = obj.data.location_area
            })
        };
        $scope.getPropertyReviews = function(unit_id) {
            if (!unit_id) {
                unit_id = $scope.propertyId
            }
            rpapi.getWithParams("GetPropertyFeedbacks", {
                unit_id: unit_id,
                order_by: "newest_first"
            }).success(function(obj) {
                
                if (obj.data.feedbacks.guest_name) {
                    var reviewsArray = [];
                    reviewsArray.push(obj.data.feedbacks);
                    $scope.reviews = reviewsArray
                } else {
                    $scope.reviews = obj.data.feedbacks

                }
            })
        };
        $scope.getPreReservationPrice = function(booking, res) {
            if (booking.checkin && booking.checkout) {
                var checkin = new Date(booking.checkin);
                var checkout = new Date(booking.checkout);
                var oneDay = 24 * 60 * 60 * 1e3;
                var stayLength = Math.round(Math.abs((checkin.getTime() - checkout.getTime()) / oneDay));
                run_waitMe("#resortpro-book-unit", "bounce", "Updating Price...");
                Alert.clear();
                var totalOccupants = parseInt(booking.occupants) + parseInt(booking.occupants_small);
                if (parseInt($scope.maxOccupants) > 0 && parseInt(booking.occupants) + parseInt(booking.occupants_small) > parseInt($scope.maxOccupants)) {
                    Alert.add(Alert.errorType, "You have selected a total of " + totalOccupants + " guests which exceeds the maximum occupancy of " + $scope.maxOccupants + " of this property. Please adjust your selection.");
                    hide_waitMe("#resortpro-book-unit");
                    $scope.isDisabled = true;
                    return false
                }
                rpapi.getWithParams("VerifyPropertyAvailability", {
                    unit_id: booking.unit_id,
                    startdate: booking.checkin,
                    enddate: booking.checkout,
                    occupants: booking.occupants,
                    occupants_small: booking.occupants_small,
                    pets: booking.pets,
                    use_room_type_logic: parseInt($rootScope.roomTypeLogic)
                }).success(function(obj) {
                    if (obj.status) {
                        $scope.reservation_days = [];
                        $scope.total_reservation = 0;
                        $scope.first_day_price = 0;
                        $scope.rent = 0;
                        $scope.taxes = 0;
                        var errorMsg = obj.status.description;
                        if (obj.status.code == "E0031" && $rootScope.searchSettings.restrictionMsg != "") {
                            errorMsg = $rootScope.searchSettings.restrictionMsg
                        }
                        Alert.add(Alert.errorType, errorMsg);
                        hide_waitMe("#resortpro-book-unit");
                        $scope.isDisabled = true
                    } else {
                        if ($rootScope.bookingSettings.inquiryOnlyFrom && $rootScope.bookingSettings.inquiryOnlyTo) {
                            var inquiryOnlyFrom = new Date($rootScope.bookingSettings.inquiryOnlyFrom);
                            var inquiryOnlyTo = new Date($rootScope.bookingSettings.inquiryOnlyTo);
                            if (!(checkout.getTime() <= inquiryOnlyFrom.getTime() || checkin.getTime() >= inquiryOnlyTo.getTime())) {
                                Alert.add(Alert.errorType, "These dates are Inquiry Only, please send us a inquiry using the form below");
                                hide_waitMe("#resortpro-book-unit");
                                $scope.isDisabled = true;
                                return false
                            }
                        }
                        var maxLengthStay = $rootScope.bookingSettings.maxLengthStay;
                        if (maxLengthStay > 0 && stayLength > maxLengthStay) {
                            Alert.add(Alert.errorType, "the max stay is on.");
                            hide_waitMe("#resortpro-book-unit");
                            $scope.isDisabled = true;
                            return false
                        }
                        var params = {
                            unit_id: booking.unit_id,
                            startdate: booking.checkin,
                            enddate: booking.checkout,
                            occupants: booking.occupants,
                            occupants_small: booking.occupants_small,
                            pets: booking.pets,
                            coupon_code: booking.coupon_code
                        };
                        if ($rootScope.includeEnabledOptional === 1) {
                            params["optional_default_enabled"] = "yes"
                        }
                        $scope.isDisabled = false;
                        rpapi.getWithParams("GetPreReservationPrice", params).success(function(obj) {
                            if (obj.data != undefined) {
                                var total_fees = 0;
                                var total_taxes = 0;
                                if (obj.data.required_fees.id) {
                                    total_fees = obj.data.required_fees.value
                                } else {
                                    angular.forEach(obj.data.required_fees, function(fee, i) {
                                        total_fees += fee.value
                                    })
                                }
                                if (obj.data.taxes_details.id) {
                                    total_taxes = obj.data.taxes_details.value
                                } else {
                                    angular.forEach(obj.data.taxes_details, function(fee, i) {
                                        total_taxes += fee.value
                                    })
                                }
                                $scope.total_reservation = obj.data.total;
                                $scope.total_fees = total_fees;
                                $scope.total_taxes = total_taxes;
                                $scope.rent = obj.data.price;
                                $scope.subTotal = $scope.calculateMarkup((obj.data.price + obj.data.coupon_discount).toString());
                                var dif = $scope.subTotal - obj.data.coupon_discount - obj.data.price;
                                $scope.taxes = obj.data.taxes - dif;
                                $scope.coupon_discount = obj.data.coupon_discount;
                                $scope.reservation_days = obj.data.reservation_days;
                                $scope.security_deposits = obj.data.security_deposits;
                                $scope.first_day_price = obj.data.first_day_price;
                                $scope.required_fees = obj.data.required_fees;
                                $scope.optional_fees = obj.data.optional_fees;
                                $scope.taxes_details = obj.data.taxes_details;
                                $scope.due_today = obj.data.due_today;
                                $scope.res = res;
                                if (obj.data.reservation_days.date != undefined) {
                                    $scope.days = false
                                } else {
                                    $scope.days = true
                                }
                                hide_waitMe("#resortpro-book-unit")
                            }
                        })
                    }
                })
            }
        };
        $scope.getParams = function() {
            var search = $scope.search;
            var params = {};
            if (search && search.sort_by) {
                params.sort_by = search.sort_by
            } else {
                params.sort_by = $scope.sortBy
            }
            params.use_room_type_logic = parseInt($rootScope.roomTypeLogic);
            params.extra_charges = 1;
            if ($rootScope.searchSettings.disableMinimalDays) {
                params.disable_minimal_days = $rootScope.searchSettings.disableMinimalDays
            }
            if ($rootScope.searchSettings.propertyDeleteUnits) {
                params.skip_units = $rootScope.searchSettings.propertyDeleteUnits
            }
            if ($rootScope.searchSettings.locationAreas != "") {
                params.location_areas_id_filter = $rootScope.searchSettings.locationAreas
            }
            if ($scope.checkNumber($rootScope.searchSettings.locationId, false)) {
                params.location_id = $rootScope.searchSettings.locationId
            }
            if ($scope.checkNumber($rootScope.searchSettings.resortAreaId, false)) {
                params.resort_area_id = $rootScope.searchSettings.resortAreaId
            }
            if ($scope.checkNumber($rootScope.searchSettings.neighborhoodId, false)) {
                params.neighborhood_area_id = $rootScope.searchSettings.neighborhoodId
            }
            if ($rootScope.searchSettings.additionalVariables == 1) {
                params.additional_variables = 1
            }
            if ($rootScope.searchSettings.extraCharges == 1) {
                params.extra_charges = 1
            }
            if (parseInt($rootScope.searchSettings.skipAmenities) === 1) {
                params.use_description = "no";
                params.use_amenities = "no"
            }
            if (search) {
                if(search.amenities){
                    params.amenities_filter = search.amenities
                }
                if ($scope.checkNumber(search.occupants, false)) {
                    params.occupants = parseInt(search.occupants);
                    $location.search("oc", params.occupants)
                } else {
                    $location.search("oc", null)
                }
                if (search.start_date && search.end_date) {
                    params.startdate = search.start_date;
                    params.enddate = search.end_date;
                    $location.search("sd", search.start_date);
                    $location.search("ed", search.end_date)
                }
                if ($scope.checkNumber(search.occupants_small, false)) {
                    params.occupants_small = parseInt(search.occupants_small);
                    $location.search("ch", params.occupants_small)
                } else {
                    $location.search("ch", null)
                }
                if ($scope.checkNumber(search.pets, false)) {
                    params.pets = parseInt(search.pets);
                    $location.search("pets", params.pets)
                } else {
                    $location.search("pets", null)
                }
                if ($scope.checkNumber(search.min_pets, false)) {
                    params.min_pets = parseInt(search.min_pets);
                    $location.search("min_pets", parseInt(search.min_pets))
                } else {
                    $location.search("min_pets", null)
                }
                if ($scope.checkNumber(search.location_id, false)) {
                    params.location_id = parseInt(search.location_id)
                }
                if ($scope.checkString(search.amenities_filter, false)) {
                    params.amenities_filter = search.amenities_filter
                }
                if ($scope.checkNumber(search.location_area_id, false)) {
                    params.location_area_id = parseInt(search.location_area_id);
                    $location.search("location_area_id", params.location_area_id)
                } else {
                    $location.search("location_area_id", null);
                    delete params.location_area_id
                }
                if ($scope.checkNumber(search.lodging_type_id, false)) {
                    params.lodging_type_id = parseInt(search.lodging_type_id);
                    $location.search("lodging_type_id", params.lodging_type_id)
                } else {
                    $location.search("lodging_type_id", null);
                    delete params.lodging_type_id
                }
                if (search.num_bedrooms != "undefined" && search.num_bedrooms >= 0 && search.num_bedrooms !== "") {
                    if ($scope.plusLogic === 1) {
                        params.min_bedrooms_number = parseInt(search.num_bedrooms);
                        $location.search("beds", parseInt(search.num_bedrooms))
                    } else {
                        if (search.num_bedrooms == null) {
                            $location.search("beds", null)
                        } else {
                            params.bedrooms_number = parseInt(search.num_bedrooms);
                            $location.search("beds", parseInt(search.num_bedrooms))
                        }
                    }
                } else {
                    $location.search("beds", null)
                }
                if ($scope.checkNumber(search.resort_area_id, false)) {
                    params.resort_area_id = parseInt(search.resort_area_id);
                    $location.search("resort_area_id", params.resort_area_id)
                } else {
                    delete params.resort_area_id;
                    $location.search("resort_area_id", null)
                }
                if ($scope.checkNumber(search.location, false)) {
                    params.location_id = parseInt(search.location);
                    $location.search("location_id", params.location_id)
                } else {
                    $location.search("location_id", null)
                }
                if ($scope.checkNumber(search.neighborhood_area_id, false)) {
                    params.neighborhood_area_id = parseInt(search.neighborhood_area_id);
                    $location.search("neighborhood_area_id", params.neighborhood_area_id)
                } else {
                    delete params.neighborhood_area_id;
                    $location.search("neighborhood_area_id", null)
                }
                if ($scope.checkNumber(search.home_type_id, false)) {
                    params.home_type_id = parseInt(search.home_type_id);
                    $location.search("home_type_id", params.home_type_id)
                } else {
                    delete params.home_type_id;
                    $location.search("home_type_id", null)
                }
                if ($scope.checkString(search.view_name, false)) {
                    params.view_name = search.view_name;
                    $location.search("view_name", params.view_name)
                } else {
                    delete params.view_name;
                    $location.search("view_name", null)
                }
                if ($scope.checkNumber(search.condo_type_id, false)) {
                    params.condo_type_id = parseInt(search.condo_type_id);
                    $location.search("condo_type_id", params.condo_type_id)
                } else {
                    delete params.condo_type_id;
                    $location.search("condo_type_id", null)
                }
                if ($scope.checkNumber(search.group_type, false)) {
                    params.condo_type_group_id = parseInt(search.group_type);
                    $location.search("group_id", params.condo_type_group_id)
                } else {
                    delete params.condo_type_group_id;
                    $location.search("group_id", null)
                }
                if (!$scope.isEmptyString(search.adults) && search.adults > 0) {
                    params.adults = parseInt(search.adults)
                }
                if (!$scope.isEmptyString(search.min_occupants) && search.min_occupants > 0) {
                    params.min_occupants = parseInt(search.min_occupants)
                }
                if (!$scope.isEmptyString(search.min_adults) && search.min_adults > 0) {
                    params.min_occupants = parseInt(search.min_adults)
                }
                if (!$scope.isEmptyString(search.min_pets) && search.min_pets > 0) {
                    params.min_occupants = parseInt(search.min_pets)
                }
                if (!$scope.isEmptyString(search.bedrooms_number) && search.bedrooms_number > 0) {
                    params.bedrooms_number = parseInt(search.bedrooms_number)
                }
                if (!$scope.isEmptyString(search.min_bedrooms_number) && search.min_bedrooms_number > 0) {
                    params.min_bedrooms_number = parseInt(search.min_bedrooms_number)
                }
                if (!$scope.isEmptyString(search.bathrooms_number) && search.bathrooms_number > 0) {
                    params.bathrooms_number = parseInt(search.bathrooms_number)
                }
                if (!$scope.isEmptyString(search.min_bathrooms_number) && search.min_bathrooms_number > 0) {
                    params.min_bathrooms_number = parseInt(search.min_bathrooms_number)
                }
                if (!$scope.isEmptyString(search.neighborhood_area_id_filter)) {
                    params.neighborhood_area_id_filter = search.neighborhood_area_id_filter
                }
                if (!$scope.isEmptyString(search.condo_type_group_id_filter)) {
                    params.condo_type_group_id_filter = search.condo_type_group_id_filter
                }
                if (!$scope.isEmptyString(search.condo_type_id_filter)) {
                    params.condo_type_id_filter = search.condo_type_id_filter
                }
                if (!$scope.isEmptyString(search.home_type_id_filter)) {
                    params.home_type_id_filter = search.home_type_id_filter
                }
                if (!$scope.isEmptyString(search.neighborhood_area_id_filter)) {
                    params.neighborhood_area_id_filter = search.neighborhood_area_id_filter
                }
                if (!$scope.isEmptyString(search.location_id_filter)) {
                    params.location_id_filter = search.location_id_filter
                }
                if (!$scope.isEmptyString(search.location_areas_id_filter)) {
                    params.location_areas_id_filter = search.location_areas_id_filter
                }
                if (!$scope.isEmptyString(search.resort_area_id_filter)) {
                    params.resort_area_id_filter = search.resort_area_id_filter
                }
                if (!$scope.isEmptyString(search.location_area_name)) {
                    params.location_area_name = search.location_area_name
                }
                if ($scope.checkString(search.unit_name, false)) {
                    params.unit_name = search.unit_name
                }
                if (!$scope.isEmptyString(search.location_type_name)) {
                    params.location_type_name = search.location_type_name
                }
                if (!$scope.isEmptyString(search.condo_type_group_name)) {
                    params.condo_type_group_name = search.condo_type_group_name
                }
            }
            $scope.amenities = [];
            angular.forEach($scope.selectedAmenities, function(item) {
                if (item != false) {
                    $scope.amenities.push(item)
                }
            });
            if ($scope.amenities.length > 0) {
                var amenities = $scope.amenities.join();
                params.amenities_filter = amenities
            }
            
            /*if(search.amenities) {
                params.amenities_filter = search.amenities
            }*/

            if ($scope.mapSearchEnabled && angular.isNumber($scope.latNE)) {
                params.latNe = $scope.latNE;
                params.longNe = $scope.longNE;
                params.latSw = $scope.latSW;
                params.longSw = $scope.longSW
            }
            if ($scope.skipUnits != "") {
                params.skip_units = $scope.skipUnits
            }
            return params
        };
        jQuery(".col-md-4.search-sidebar #sticky-wrapper").removeClass("sticky-wrapper");
        $scope.requestPropertyList = function(method) {
            $scope.availabilitySearch()
        };

        $scope.setCookie=function(c_name,value,exdays){
            var exdate=new Date();
            exdate.setDate(exdate.getDate() + exdays);
            var c_value=escape(value) + ((exdays==null) ? "" : "; expires="+exdate.toUTCString());
            document.cookie=c_name + "=" + c_value;
        }

        $scope.getCookie=function(c_name){
            var i,x,y,ARRcookies=document.cookie.split(";");
            for (i=0;i<ARRcookies.length;i++)
              {
              x=ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
              y=ARRcookies[i].substr(ARRcookies[i].indexOf("=")+1);
              x=x.replace(/^\s+|\s+$/g,"");
              if (x==c_name)
                {
                return unescape(y);
                }
              }
        }

        $scope.checkCookie= function(){
            var emailaddress=getCookie("emailaddress");
            if (emailaddress!=null && emailaddress!="")
              {
                document.getElementById('newsletter_nav').setAttribute( 'style', 'display:none' );
                document.getElementById('replacement_nav').setAttribute( 'style', 'display:block' );    

              }
            else 
              {
                document.getElementById('newsletter_nav').setAttribute( 'style', 'display:block' );
                document.getElementById('replacement_nav').setAttribute( 'style', 'display:none' );  

              }
        }

        $scope.availabilitySearch = function(search, map_search) {
            var cookiePageObject = jQuery($cookies.get("sl_current_page"));
            var view = jQuery($cookies.get("view"));
            if ($rootScope.searchSettings.enable_save_unit_place == 1 && cookiePageObject.selector != "") {
                size = pagination_search_number
            } else {
                size = $rootScope.searchSettings.propertyPagination
            }
            properties = $rootScope.propList;
            $scope.noResults = false;
            $scope.currentPage = 1;
            if (!$scope.limit) {
                $scope.limit = size
            }
            map_search = typeof map_search !== "undefined" ? map_search : false;
            $scope.mapSearch = map_search;
            $scope.loading = true;
            var params = $scope.getParams();
            console.log("In Availability Function");
            console.log(params);
            params.page_number = $scope.currentPage;
            params.page_results_number = size;
            angular.forEach(arrMarkers, function(item, i) {
                item.setMap(null)
            });
            arrMarkers = [];
            $scope.searchProperties(params, size, 1, true)
            $scope.currentView = "gridview";
            if(view.selector){
                 if(view.selector == "mapview"){
                    $scope.changeToMapView();
                 }

                 if(view.selector == "gridview"){
                    $scope.changeToGridView();
                 }

                 if(view.selector == "listview"){
                    $scope.changeToListView();
                 }
            }else{
                $scope.view = "gridview";
                $scope.showload = true;
            }     
        };

        $scope.clearFilter = function(e){
            jQuery("html, body").animate({ scrollTop: 0 }, "slow");
        	var uri = window.location.href.toString();
			if (uri.indexOf("?") > 0) {
			    var clean_uri = uri.substring(0, uri.indexOf("?"));
			    window.history.replaceState({}, document.title, clean_uri);
			}
            jQuery('#resortpro-widget-form')[0].reset();
            jQuery('#resortpro-search-guests-children-block-not').find('.ng-binding').html("");
            jQuery('#resortpro-search-number-bedrooms-block-not').find(".ng-binding").html("");
             jQuery('.guestquant').html("");
            jQuery('.bedsquant').html("");
            jQuery('.checkindate').html("");
            jQuery('.checkoutdate').html("");
            jQuery('.locationname').html("");
            jQuery('.ammenties').html("");
            jQuery('.ammenties-item').children().remove();
            jQuery('.ammenties-item').parent().parent().addClass("d-none");
            setTimeout(function(){
               jQuery('#resetbedsroom').trigger("click");
            },500)

            setTimeout(function(){
                jQuery('.label-single-guest').html("Guest");
                jQuery('.label-single-bed').html("Bed");
            },200)

             jQuery('.guestquant').parent().addClass("d-none");
             jQuery('.bedsquant').parent().addClass("d-none");
             jQuery('.checkindate').parent().addClass("d-none");
             jQuery('.checkoutdate').parent().addClass("d-none");
             jQuery('.locationname').parent().addClass("d-none");
            $scope.noResults = false
            $scope.isDataShow = "false";
            $scope.showfilter = false;
            $scope.showclearbtn = false;
            if ($rootScope.searchSettings.enable_save_unit_place == 1 && cookiePageObject.selector != "") {
                size = pagination_search_number
            } else {
                size = $rootScope.searchSettings.propertyPagination
            }
            var params = $scope.getParams();
            $scope.searchProperties(params, size, 1, true)
        }

        $scope.updateSearch = function(e){
            jQuery("html, body").animate({ scrollTop: 0 }, "slow");
        	$scope.noResults = false;
            $scope.isDataShow = "false";
            e.preventDefault();
            var ammenties = [];
            var ammentiestext = [];
            var start_date = jQuery('#search_start_date').val();
            var end_date   = jQuery('#search_end_date').val();
            var children   = jQuery('#resortpro-search-guests-children-block-not').find('.ng-binding').html();
            var beds       = jQuery('#resortpro-search-number-bedrooms-block-not').find(".ng-binding").html();
            var location   = jQuery("#resortpro_sw_ra_id option:selected").val();
            var location_text = jQuery("#resortpro_sw_ra_id option:selected").text();
            jQuery('input[name="resortpro_sw_amenities[]"]:checked').each(function(e) {
            	console.log(jQuery(this).attr("value")               );
                ammenties.push({
                              id:jQuery(this).attr("value"),
                              name:jQuery(this).next('label').html()
                   });
            });
            $scope.showfilter = true;
            if(children && children!=0){
            	if(children == 1){
            		jQuery('.guestquant').html(children+" "+"guest");
            	}else{
            		jQuery('.guestquant').html(children+" "+"guests");
            	}
                
                jQuery('.guestquant').parent().removeClass("d-none");
                $scope.showclearbtn = true
            }else{
                jQuery('.guestquant').html("");
                jQuery('.guestquant').parent().addClass("d-none");
            }
            if(beds){
            	if(beds == 1){
            		jQuery('.bedsquant').html(beds+" "+"bed");
            	}else{
            		jQuery('.bedsquant').html(beds+" "+"beds");
            	}
                jQuery('.bedsquant').parent().removeClass("d-none");
                $scope.showclearbtn = true
            }else{
                 jQuery('.bedsquant').html("");
                jQuery('.bedsquant').parent().addClass("d-none");
            }
            if(start_date){
                jQuery('.checkindate').html(start_date);
                jQuery('.checkindate').parent().removeClass("d-none");
                $scope.showclearbtn = true
            }else{
                jQuery('.checkindate').html("");
                jQuery('.checkindate').parent().addClass("d-none");
            }
            if(end_date){
                jQuery('.checkoutdate').html(end_date);
                jQuery('.checkoutdate').parent().removeClass("d-none");
                $scope.showclearbtn = true
            }else{
                jQuery('.checkoutdate').html("");
                jQuery('.checkoutdate').parent().addClass("d-none");
            }
            if(location){
            	if(location_text.length>10){
            		jQuery('.locationname').html(location_text.substr(0, 10) + "...");
            	}else{
            		jQuery('.locationname').html(location_text);
            	}
                
                jQuery('.locationname').parent().removeClass("d-none");
                $scope.showclearbtn = true
            }else{
                jQuery('.locationname').html("");
                jQuery('.locationname').parent().addClass("d-none");
            }
            if(ammenties.length>0){
            	jQuery('.ammenties-item').html("");
                jQuery('.ammenties-item').parent().parent().removeClass("d-none");
                for(var i=0; i<ammenties.length; i++){
                    var html = '<label class="font-13 font-weight-light-bold d-block" for="customCheck1">'+ammenties[i].name+'</label>'
                    jQuery('.ammenties-item').append(html)
                }
                $scope.showclearbtn = true
            }else{
                 jQuery('.ammenties-item').children().remove();
                 jQuery('.ammenties-item').parent().parent().addClass("d-none");
            }

            if(!children && !beds && !start_date && !end_date && !location && !ammenties.length>0){
                $scope.showfilter = false;
                $scope.showclearbtn = false;
            }
            $scope.loadingShow = "true"
            var cookiePageObject = jQuery($cookies.get("sl_current_page"));
            var view = jQuery($cookies.get("view"));

            if ($rootScope.searchSettings.enable_save_unit_place == 1 && cookiePageObject.selector != "") {
                size = pagination_search_number
            } else {
                size = $rootScope.searchSettings.propertyPagination
            }
            var params = $scope.getParams();
            if(beds){
                params['bedrooms_number'] = parseInt(beds);
            }
            if(start_date){
                params['startdate'] = start_date
            }
            if(end_date){
                params['enddate'] = end_date
            }
            if(children){
                params['occupants_small'] = parseInt(children)
            }
            if(location){
                params['resort_area_id'] = parseInt(location)
            }
            if(ammenties.length>0){
                params['amenities_filter'] = ammenties.join(",");
            }
            console.log(params);
            $scope.searchProperties(params, size, 1, true)
            
           //run_waitMe(".listings_wrapper_box", "bounce", "Searching The Best Places For You...");
           if($scope.sortBy != "random"){
              jQuery('.sortfilter').val($scope.sortBy);
           }
        }


        $scope.searchMap = function(params, size, page, clearUnits) {
            mapLoaded = true;
            params.page_number = page;
            params.page_results_number = size;
            method = $rootScope.searchSettings.searchMethod;
            if (!(params.startdate == "" || params.startdate == undefined) && !(params.enddate == "" || params.enddate == undefined)) {
                var oneDay = 24 * 60 * 60 * 1e3;
                var checkin = new Date(params.startdate);
                var checkout = new Date(params.enddate);
                var diffDays = Math.round(Math.abs((checkin.getTime() - checkout.getTime()) / oneDay));
                $scope.daysDiff = diffDays;
                if (diffDays > $rootScope.searchSettings.maxSearchDays) {
                    method = "GetPropertyAvailabilitySimple"
                }
            } else {
                method = "GetPropertyListWordPress"
            }
            $scope.method = method;
            //run_waitMe(".map-container-wrapper", "roundBounce", "Getting all the location...");
            $scope.enableInfinitiScroll = false;
            rpapi.getWithParams(method, params).success(function(obj) {
                hide_waitMe(".map-container-wrapper");
                if (!obj.status && obj.data.available_properties && obj.data.available_properties.pagination.total_units > 0) {
                    var tempProperties = [];
                    if (method == "GetPropertyAvailabilitySimple" || method == "GetPropertyListWordPress") {
                        tempProperties = obj.data.property
                    } else {
                        tempProperties = obj.data.available_properties.property
                    }
                    $scope.loadMarkers(tempProperties, false)
                } else {
                    $scope.noResults = true
                }
            });
            $scope.loading = false
            var view = jQuery($cookies.get("view"));
            if(view.selector){
                if(view.selector == "mapview"){
                   jQuery(".loadmore").hide();
                }
            }
        }

        $scope.searchProperties = function(params, size, page, clearUnits) {
            $scope.noResults = false
            $scope.loadingShow = "true"
            $scope.showBtn = false
            params.page_number = page;
            params.page_results_number = size;
            method = $rootScope.searchSettings.searchMethod;
            if (!(params.startdate == "" || params.startdate == undefined) && !(params.enddate == "" || params.enddate == undefined)) {
                var oneDay = 24 * 60 * 60 * 1e3;
                var checkin = new Date(params.startdate);
                var checkout = new Date(params.enddate);
                var diffDays = Math.round(Math.abs((checkin.getTime() - checkout.getTime()) / oneDay));
                $scope.daysDiff = diffDays;
                if (diffDays > $rootScope.searchSettings.maxSearchDays) {
                    method = "GetPropertyAvailabilitySimple"
                }
            } else {
                method = "GetPropertyListWordPress"
            }
            $scope.method = method;
            //run_waitMe(".map-container-wrapper", "bounce", "Getting all the location...");
            //run_waitMe(".listings_wrapper_box", "bounce", "Searching The Best Places For You...");
            //run_waitMe(".list-container-wrapper", "bounce", "Searching The Best Places For You...");
            $scope.enableInfinitiScroll = false;
            rpapi.getWithParams(method, params).success(function(obj) {
                $scope.showBtn = true
                $scope.loadingShow = "false"
                $scope.loadMoreShow = "false"
                $scope.isDataShow = "true";
                jQuery(".col-md-4.search-sidebar #sticky-wrapper").addClass("sticky-wrapper");
                if ($rootScope.searchSettings.enable_save_unit_place == 1) {
                    var cookieunitobj = $cookies.getObject("unit_id");
                    var sl_cookie_unit = "#unit-" + cookieunitobj;
                    setTimeout(function() {
                        offset = 0;
                        if (jQuery("body.admin-bar").length > 0) offset = 32;
                        jQuery(document).ready(function() {
                            if (typeof cookieunitobj != "undefined") {
                                jQuery("html, body").animate({
                                    scrollTop: jQuery(sl_cookie_unit).offset().top + 0
                                }, "slow");
                                $scope.deleteCookiesFilters();
                                return false
                            }
                        })
                    }, 50)
                }
                var cookiePageObject = jQuery($cookies.get("sl_current_page"));
                hide_waitMe(".listings_wrapper_box");
                hide_waitMe(".list-container-wrapper");
                if (clearUnits) {
                    $rootScope.propertiesObj = [];
                    $rootScope.properties = [];
                    if (params.skip_units) {
                        $scope.skipUnits = params.skip_units
                    } else {
                        $scope.skipUnits = ""
                    }
                    if ($rootScope.searchSettings.enable_save_unit_place == 1 && cookiePageObject.selector != "") {
                        $scope.limit = pagination_search_number
                    } else {
                        $scope.limit = $rootScope.searchSettings.propertyPagination
                    }
                }
                if (!obj.status && obj.data.available_properties && obj.data.available_properties.pagination.total_units > 0) {
                    if (obj.data.available_properties.pagination.total_pages > $scope.currentPage) {
                        $scope.enableInfinitiScroll = true
                    }
                    if (clearUnits) {
                        $scope.total_units = obj.data.available_properties.pagination.total_units
                    }
                    $scope.foundUnits = true;
                    var tempProperties = [];
                    if (method == "GetPropertyAvailabilitySimple" || method == "GetPropertyListWordPress") {
                        tempProperties = obj.data.property
                    } else {
                        tempProperties = obj.data.available_properties.property
                    }
                    if ($rootScope.properties.length > 0) {
                        $rootScope.properties = $rootScope.properties.concat(tempProperties)
                    } else {
                        $rootScope.properties = tempProperties
                    }
                    $rootScope.propertiesObj = Object.keys($rootScope.properties).map(function(key) {
                        return $rootScope.properties[key]
                    });
                    if (params.sort_by == "random") {
                        angular.forEach(tempProperties, function(property) {
                            if ($scope.skipUnits == "") {
                                $scope.skipUnits = property.id
                            } else {
                                $scope.skipUnits += "," + property.id
                            }
                        })
                    }
                   
                    //$scope.loadMarkers(tempProperties, false)
                } else {
                    $scope.noResults = true
                    hide_waitMe(".map-container-wrapper");
                }
                $scope.searchMap(params, $scope.total_units, 1, true)
            });
            $scope.loading = false
        };

        $scope.showAll = function() {
            var params = $scope.getParams();
            $scope.showAllProperties(params, $scope.total_units, 1, false);
        };

        $scope.showAllProperties = function(params, size, page, clearUnits) {
            $scope.showAllClicked = true
            $scope.showBtn = false;
            params.page_number = page;
            params.page_results_number = size;
            params.skip_units = "";
            method = $rootScope.searchSettings.searchMethod;
            if (!(params.startdate == "" || params.startdate == undefined) && !(params.enddate == "" || params.enddate == undefined)) {
                var oneDay = 24 * 60 * 60 * 1e3;
                var checkin = new Date(params.startdate);
                var checkout = new Date(params.enddate);
                var diffDays = Math.round(Math.abs((checkin.getTime() - checkout.getTime()) / oneDay));
                $scope.daysDiff = diffDays;
                if (diffDays > $rootScope.searchSettings.maxSearchDays) {
                    method = "GetPropertyAvailabilitySimple"
                }
            } else {
                method = "GetPropertyListWordPress"
            }
            $scope.method = method;
            run_waitMe(".listings_wrapper_box", "roundBounce", "Searching The Best Places For You...");
            $scope.enableInfinitiScroll = false;
            rpapi.getWithParams(method, params).success(function(obj) {
                $scope.showbuttons = false;
                jQuery(".col-md-4.search-sidebar #sticky-wrapper").addClass("sticky-wrapper");
                hide_waitMe(".listings_wrapper_box");
                if (clearUnits) {
                    $rootScope.propertiesObj = [];
                    $rootScope.properties = [];
                    if (params.skip_units) {
                        $scope.skipUnits = params.skip_units
                    } else {
                        $scope.skipUnits = ""
                    }
                }
                if (!obj.status && obj.data.available_properties && obj.data.available_properties.pagination.total_units > 0) {
                    if (obj.data.available_properties.pagination.total_pages > $scope.currentPage) {
                        $scope.enableInfinitiScroll = true
                    }
                    if (clearUnits) {
                        $scope.total_units = obj.data.available_properties.pagination.total_units
                    }
                    $scope.foundUnits = true;
                    var tempProperties = [];
                    if (method == "GetPropertyAvailabilitySimple" || method == "GetPropertyListWordPress") {
                        tempProperties = obj.data.property
                    } else {
                        tempProperties = obj.data.available_properties.property
                    }
                    if ($rootScope.properties.length > 0) {
                        $rootScope.properties = $rootScope.properties.concat(tempProperties)
                    } else {
                        $rootScope.properties = tempProperties
                    }
                    $rootScope.propertiesObj = tempProperties

                    if (params.sort_by == "random") {
                        angular.forEach(tempProperties, function(property) {
                            if ($scope.skipUnits == "") {
                                $scope.skipUnits = property.id
                            } else {
                                $scope.skipUnits += "," + property.id
                            }
                        })
                    }
                   
                } else {
                    $scope.noResults = true
                }
            });
            $scope.loading = false   
        }


        $scope.paymentLogin = function(login) {
            var data = {
                action: "streamlinecore-payment-login",
                confirmation_id: login.confirmation_id,
                zip_code: login.zip_code,
                nonce: login.nonce
            };
            run_waitMe("#login-payment-form");
            $http({
                method: "POST",
                headers: {
                    "Content-type": "application/json"
                },
                url: streamlinecoreConfig.ajaxUrl,
                params: data
            }).then(function successCallback(response) {
                hide_waitMe("#login-payment-form");
                if (response.data.success) {
                    jQuery("#hash").val(response.data.data.hash);
                    jQuery("#form_payment_login").submit()
                } else {
                    Alert.add(Alert.errorType, "Confirmation number or zip code incorrect.")
                }
            }, function errorCallback(response) {
                Alert.add(Alert.errorType, "Cant send email")
            })
        };
        $scope.shareWithFriends = function() {
            if ($scope.frmShare.$valid) {
                var link = $scope.goToProperty($scope.share.seo_page_name, $scope.share.start_date, $scope.share.end_date, $scope.share.occupants, $scope.share.occupants_small, $scope.share.pets);
                var message = $scope.share.message;
                var data = {
                    action: "streamlinecore-share-with-friends",
                    fnames: $scope.share.fnames,
                    femails: $scope.share.femails,
                    name: $scope.share.name,
                    email: $scope.share.email,
                    msg: message,
                    slug: $scope.share.seo_page_name,
                    link: link,
                    nonce: $scope.share.nonce
                };
                $http({
                    method: "POST",
                    headers: {
                        "Content-type": "application/json"
                    },
                    url: streamlinecoreConfig.ajaxUrl,
                    params: data
                }).then(function successCallback(response) {
                    if (response.data.success) {
                        Alert.add(Alert.successType, response.data.data.message);
                        setTimeout(function() {
                            jQuery("#modalShare").modal("hide")
                        }, 3e3)
                    } else {
                        Alert.add(Alert.errorType, response.data.data.message)
                    }
                }, function errorCallback(response) {
                    Alert.add(Alert.errorType, "Cant send email")
                })
            }
            return false
        };
        $scope.filterByPrice = function(minPrice, maxPrice) {
            $scope.priceRangeEnabled = true;
            $scope.minPrice = minPrice;
            $scope.maxPrice = maxPrice;
            jQuery('.minval').val('$'+minPrice);
            jQuery('.maxval').val('$'+maxPrice);
        };
        $scope.filterByBedroom = function(minBedroom, maxBedroom) {
            $scope.BedroomsRangeEnabled = true;
            $scope.minBedroom = minBedroom;
            $scope.maxBedroom = maxBedroom
        };
        $scope.bedroomFilter = function(item) {
            var result = true;
            if ($scope.bedroomsNumber.indexOf("-") !== -1) {
                var beds = $scope.bedroomsNumber.split("-");
                if (item.bedrooms_number >= beds[0] && item.bedrooms_number <= beds[1]) {
                    return true
                } else {
                    return false
                }
            } else {
                if (parseInt($scope.bedroomsNumber) > 0) {
                    if (item.bedrooms_number == $scope.bedroomsNumber) {
                        result = true
                    } else {
                        result = false
                    }
                }
            }
            return result
        };
        $scope.locationFilter = function(item) {
            var result = true;
            if ($scope.locationAreaId > 0) {
                if (item.location_area_id == $scope.locationAreaId) {
                    result = true
                } else {
                    result = false
                }
            }
            return result
        };
        $scope.neighborhoodFilter = function(item) {
            var result = true;
            if ($scope.neighborhood != "") {
                if (item.neighborhood_name == $scope.neighborhood) {
                    result = true
                } else {
                    result = false
                }
            }
            return result
        };
        $scope.viewNameFilter = function(item) {
            var result = true;
            if ($scope.viewname != "") {
                if (item.view_name == $scope.viewname) {
                    result = true
                } else {
                    result = false
                }
            }
            return result
        };
        $scope.priceRange = function(item) {

            $scope.amenities = [];
            angular.forEach($scope.selected, function(amenity) {
                if (amenity != false) {
                    $scope.amenities.push(item)
                }
            });
            var result = true;
            if ($scope.priceRangeEnabled) {
                if (item.price_data.daily >= $scope.minPrice && item.price_data.daily <= $scope.maxPrice) {
                    result = true
                } else {
                    result = false
                }
            }

            if(!$scope.showAllClicked) {
                 if(jQuery('.grid_view_container').length==0){
                   $scope.showBtn = false;
                }else{
                    $scope.showBtn = true;
                }
            }
            setInterval(function(){ 
                if(jQuery('.propertydtl').length == 0){
                   jQuery('.load-more').addClass("d-none");
                   if(jQuery('.noresultprimary').length==0 && jQuery('.loading').length == 0){
                      jQuery(".noresult").removeClass("d-none");
                   } 
                }else{
                    jQuery('.load-more').removeClass("d-none");
                    jQuery(".noresult").addClass("d-none");
                }

            }, 500);
            return result           
            
        };
        $scope.resetSearch = function() {
            $scope.search.occupants = "";
            $scope.search.end_date = "";
            $scope.search.start_date = "";
            $scope.search.home_type = "";
            $scope.search.group_type = "";
            $scope.search.bedroom_type = "";
            $scope.search.viewname = "";
            $scope.search.area = "";
            $scope.search.location_resort = "";
            $scope.search.neighborhood_id = "";
            $scope.search.location = "";
            $scope.search.num_bedrooms = "";
            $scope.search.occupants_small = "";
            $scope.search.pets = "";
            $scope.search.start_date = "";
            $scope.search.end_date = "";
            jQuery(".ui-slider-range").css("left", "0");
            jQuery(".ui-slider-range").css("width", "100%");
            jQuery(".resortpro-search-price .ui-slider-handle").first().css("left", "0");
            jQuery(".resortpro-search-price .ui-slider-handle").last().css("right", "0");
            jQuery(".resortpro-search-price .ui-slider-handle").last().css("left", "auto");
            $scope.minPrice = 100;
            $scope.maxPrice = "";
            window.setTimeout(function() {
                $scope.availabilitySearch("");
                $scope.filterByPrice(0, 5e3);
                $scope.priceRangeEnabled = false;
                $scope.priceRange()
            }, 100);
            $location.search({
                "": null
            });
            jQuery(".amenity_group input").removeAttr("checked")
        };
        /*jQuery(document).ready(function() {
            jQuery(".view_type_menu li").on("click", function() {
                jQuery(this).parents("ol").find("li").removeClass("selected_view");
                jQuery(this).addClass("selected_view")
            })
        });*/
        $scope.availableProperties = function(id) {
            if ($scope.results.length >= 0) {
                if ($.inArray(id, $scope.results) >= 0) {
                    return true
                } else {
                    return false
                }
            } else {
                return true
            }
        };
        $scope.getRoomDetails = function(unit_id) {
            $scope.room_details = [];
            if (!unit_id) {
                unit_id = $scope.propertyId
            }
            rpapi.getWithParams("GetPropertyRoomsDetailsRawData", {
                unit_id: unit_id
            }).success(function(obj) {
                if (obj.data.roomsdetails) {
                    if (obj.data.roomsdetails.name) {
                        var results = [];
                        results.push(obj.data.roomsdetails);
                        $scope.room_details = results
                    } else {
                        $scope.room_details = obj.data.roomsdetails
                    }
                }
            })
        };
        $scope.getRatesDetails = function(unit_id) {
            if ($rootScope.rates_details.length == 0) {
                var params = {
                    unit_id: unit_id
                };
                if ($rootScope.yielding == "1") params["use_yielding"] = "yes";
                rpapi.getWithParams("GetPropertyRatesRawData", params).success(function(obj) {
                    if (obj.data.rates.period_begin) {
                        var results = [];
                        results.push(obj.data.rates);
                        $rootScope.rates_details = results
                    } else {
                        $rootScope.rates_details = obj.data.rates
                    }
                    jQuery(".availability-calendar").datepicker("refresh");
                    add_tooltip()
                })
            }
        };
        $scope.getCalendarData = function(unit_id) {
            rpapi.getWithParams("GetPropertyAvailabilityCalendarRawData", {
                unit_id: unit_id
            }).success(function(obj) {
                if (obj.data.blocked_period.startdate) {
                    var results = [];
                    results.push(obj.data.blocked_period);
                    $rootScope.calendar = results
                } else {
                    $rootScope.calendar = obj.data.blocked_period
                }
                add_tooltip();
                $scope.getRatesDetails(unit_id);
                jQuery(".availability-calendar").datepicker("refresh")
            })
        };
        $scope.getCalendarDataNew = function(unit_id) {
            var use_room_type = "no";
            if ($rootScope.roomTypeLogic == "1") {
                use_room_type = "yes"
            }
            rpapi.getWithParams("GetPropertyAvailabilityRawData", {
                unit_id: unit_id,
                use_room_type_logic: use_room_type
            }).success(function(obj) {
                if (obj.data) {
                    $rootScope.calendar2 = obj.data
                }
                add_tooltip();
                $scope.getRatesDetails(unit_id);
                jQuery(".availability-calendar").datepicker("refresh")
            })
        };
        $scope.getPropertyRatesAndStay = function(unit_id) {
            var today = new Date;
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();
            if (dd < 10) {
                dd = "0" + dd
            }
            if (mm < 10) {
                mm = "0" + mm
            }
            today = mm + "/" + dd + "/" + yyyy;
            var d = new Date;
            d.setFullYear(yyyy + 1);
            dd = d.getDate();
            mm = d.getMonth() + 1;
            yyyy = d.getFullYear();
            var next_year = mm + "/" + dd + "/" + yyyy;
            var params = {
                unit_id: unit_id,
                startdate: today,
                enddate: next_year
            };
            if ($rootScope.roomTypeLogic == "1") params["use_room_type_logic"] = "yes";
            rpapi.getWithParams("GetPropertyRates", params).success(function(obj) {
                if (obj.data.season) {
                    $rootScope.rates.push(obj.data)
                } else {
                    angular.forEach(obj.data, function(rate, index) {
                        $rootScope.rates.push(rate)
                    })
                }
                jQuery(".availability-calendar").datepicker("refresh");
                add_tooltip()
            })
        };
        $scope.renderCalendar = function(date, checkout) {
            var title = "";
            var booked = false;
            var strClass = "available";
            angular.forEach($rootScope.rates_details, function(rateObj, index) {
                var periodBegin = new Date(rateObj.period_begin);
                var periodEnd = new Date(rateObj.period_end);
                if (date >= periodBegin && date <= periodEnd) {
                    var daysMapping = {
                        Sunday: 0,
                        Monday: 1,
                        Tuesday: 2,
                        Wednesday: 3,
                        Thursday: 4,
                        Friday: 5,
                        Saturday: 6
                    };
                    if (rateObj.daily_first_interval) {
                        var arrInterval = rateObj.daily_first_interval.split("-");
                        title = rateObj.daily_first_interval_price;
                        if (arrInterval.length > 1) {
                            var firstInt = daysMapping[arrInterval[0]];
                            var secondInt = daysMapping[arrInterval[1]];
                            if (secondInt > firstInt) {
                                if (date.getDay() >= firstInt && date.getDay() <= secondInt) {
                                    title = rateObj.daily_first_interval_price
                                } else {
                                    title = rateObj.daily_second_interval_price
                                }
                            } else {
                                if (date.getDay() < firstInt && date.getDay() > secondInt) {
                                    title = rateObj.daily_second_interval_price
                                } else {
                                    title = rateObj.daily_first_interval_price
                                }
                            }
                        } else {
                            title = rateObj.daily_first_interval_price
                        }
                    } else {
                        title = rateObj.season_name
                    }
                }
            });
            angular.forEach($rootScope.calendar, function(calObj, index) {
                var use_slash = false;
                var startdate = new Date(calObj.startdate);
                var enddate = new Date(calObj.enddate);
                if ($rootScope.slash == "1") use_slash = true;
                if (use_slash) {
                    enddate.setTime(enddate.getTime() + 1 * 864e5);
                    if (!checkout) {
                        if (date >= startdate && date <= enddate) {
                            booked = true;
                            strClass = "booked";
                            if (date.getTime() === startdate.getTime()) {
                                if ($rootScope.calendar[index - 1]) {
                                    var previousdate = new Date($rootScope.calendar[index - 1].enddate);
                                    previousdate.setTime(previousdate.getTime() + 1 * 864e5);
                                    if (previousdate.getTime() !== startdate.getTime()) {
                                        booked = true;
                                        strClass = "slashl"
                                    }
                                } else {
                                    booked = true;
                                    strClass = "slashl"
                                }
                            } else if (date.getTime() === enddate.getTime()) {
                                booked = false;
                                strClass = "slashr"
                            }
                        }
                    } else {
                        if (date.getTime() === startdate.getTime()) {
                            if ($rootScope.calendar[index - 1]) {
                                var previousdate = new Date($rootScope.calendar[index - 1].enddate);
                                previousdate.setTime(previousdate.getTime() + 1 * 864e5);
                                if (previousdate.getTime() !== startdate.getTime()) {
                                    booked = false;
                                    strClass = "slashl"
                                } else {
                                    booked = false;
                                    strClass = "booked"
                                }
                            } else {
                                booked = false;
                                strClass = "slashl"
                            }
                        }
                        if (date > startdate && date <= enddate) {
                            booked = true;
                            strClass = "booked";
                            if ($scope.book.checkin) {
                                checkin = new Date($scope.book.checkin);
                                if (date > checkin) {
                                    $scope.maxCalendarDate = date
                                }
                            }
                        }
                    }
                } else {
                    if (!checkout) {
                        if (date >= startdate && date <= enddate) {
                            booked = true;
                            strClass = "booked"
                        }
                    } else {
                        if (date.getTime() === startdate.getTime()) {
                            booked = false;
                            strClass = "available"
                        }
                        if (date > startdate && date <= enddate) {
                            booked = true;
                            strClass = "booked"
                        }
                    }
                }
            });
            if ($rootScope.hideTooltips == 1) {
                title = ""
            }
            return [!booked, strClass, title]
        };
        $scope.renderCalendarNew = function(date, restriction, action) {
            if ($rootScope.calendar2.range) {
                var str_price = "";
                var start_date = new Date($rootScope.calendar2.range.beginDate);
                var end_date = new Date($rootScope.calendar2.range.endDate);
                angular.forEach($rootScope.rates_details, function(rateObj) {
                    var periodBegin = new Date(rateObj.period_begin);
                    var periodEnd = new Date(rateObj.period_end);
                    if (date >= periodBegin && date <= periodEnd) {
                        var daysMapping = {
                            Sunday: 0,
                            Monday: 1,
                            Tuesday: 2,
                            Wednesday: 3,
                            Thursday: 4,
                            Friday: 5,
                            Saturday: 6
                        };
                        if (rateObj.daily_first_interval) {
                            var arrInterval = rateObj.daily_first_interval.split("-");
                            str_price = rateObj.daily_first_interval_price;
                            if (arrInterval.length > 1) {
                                var firstInt = daysMapping[arrInterval[0]];
                                var secondInt = daysMapping[arrInterval[1]];
                                if (secondInt > firstInt) {
                                    if (date.getDay() >= firstInt && date.getDay() <= secondInt) {
                                        str_price = rateObj.daily_first_interval_price
                                    } else {
                                        str_price = rateObj.daily_second_interval_price
                                    }
                                } else {
                                    if (date.getDay() < firstInt && date.getDay() > secondInt) {
                                        str_price = rateObj.daily_second_interval_price
                                    } else {
                                        str_price = rateObj.daily_first_interval_price
                                    }
                                }
                            } else {
                                str_price = rateObj.daily_first_interval_price
                            }
                        } else {
                            str_price = rateObj.season_name
                        }
                    }
                });
                var loop = new Date(start_date);
                var i = 0;
                while (loop <= end_date) {
                    if (date.toDateString() == loop.toDateString()) {
                        var prev_available = $rootScope.calendar2.availability.substring(i - 1, i);
                        var available = $rootScope.calendar2.availability.substring(i, i + 1);
                        var change_over = $rootScope.calendar2.changeOver.substring(i, i + 1);
                        if (available == "Y") {
                            var is_available = true;
                            if (restriction && action == "checkin" && (change_over == "X" || change_over == "O")) {
                                is_available = false
                            } else if (restriction && action == "checkout" && (change_over == "X" || change_over == "I")) {
                                is_available = false
                            } else if (!restriction) {
                                is_available = false
                            }
                            var class_available = prev_available == "N" ? "slash-end available" : "available";
                            return [is_available, class_available, str_price]
                        } else {
                            var class_available = prev_available == "Y" ? "slash-start available" : "booked";
                            var is_available = false;
                            if (prev_available == "Y" && action == "checkout") {
                                is_available = true;
                                class_available = "slash-start available"
                            }
                            return [is_available, class_available, str_price]
                        }
                    }
                    var current_date = loop.setDate(loop.getDate() + 1);
                    loop = new Date(current_date);
                    i++
                }
            }
            return [false, "booked", ""]
        };
        $scope.myShowDaysFunction = function(date) {
            var res = $scope.renderCalendar(date, false);
            return res
        };
        $scope.myShowDaysFunctionCheckout = function(date) {
            var res = $scope.renderCalendar(date, true);
            return res
        };
        $scope.dragEnd = function(search) {
            if ($scope.mapSearchEnabled && !$scope.isFitBounds) {
                var ne = map.getBounds().getNorthEast();
                var sw = map.getBounds().getSouthWest();
                $scope.latNE = ne.lat();
                $scope.longNE = ne.lng();
                $scope.latSW = sw.lat();
                $scope.longSW = sw.lng();
                $scope.availabilitySearch($scope.search, true)
            }
        };
        $scope.isSimplePricing = function(property) {
            return !property.price ? true : false
        };
        $scope.getTotalPrice = function(property, decimals) {
            var price = "N/A";
            if ($rootScope.searchSettings.searchMethod == "GetPropertyAvailabilityWithRatesWordPress") {
                if ($rootScope.searchSettings.priceDisplay == "price" && property.price > 0) {
                    price = $filter("currency")(property.price, undefined, decimals)
                } else {
                    price = $filter("currency")(property.total, undefined, decimals)
                }
            }
            return price
        };
        $scope.getOldPrice = function(property, decimals) {
            var price = "N/A";
            if ($rootScope.searchSettings.searchMethod == "GetPropertyAvailabilityWithRatesWordPress") {
                if ($rootScope.searchSettings.priceDisplay == "price" && property.price > 0) {
                    var total = property.price + property.coupon_discount;
                    price = $filter("currency")(total, undefined, decimals)
                } else {
                    var total = property.total + property.coupon_discount;
                    price = $filter("currency")(total, undefined, decimals)
                }
            }
            return price
        };
        $scope.getReservationPrice = function(property) {
            var price = 0;
            if ($rootScope.searchSettings.searchMethod == "GetPropertyAvailabilityWithRatesWordPress") {
                if ($rootScope.searchSettings.priceDisplay == "price" && property.price > 0) {
                    price = property.price
                } else {
                    price = property.total
                }
            }
            return price
        };
        $scope.getTotalAppend = function(property) {
            if ($rootScope.searchSettings.priceDisplay == "price" && property.total && property.total > 0) {
                return "excluding taxes & fees"
            } else {
                return "including taxes & fees"
            }
        };
        $scope.getSimplePrice = function(price_data, decimals) {
            var priceText = "N/A";
            var diffDays = 0;
            if ($scope.search) {
                var oneDay = 24 * 60 * 60 * 1e3;
                var checkin = new Date($scope.search.start_date);
                var checkout = new Date($scope.search.end_date);
                diffDays = Math.round(Math.abs((checkin.getTime() - checkout.getTime()) / oneDay))
            }
            if ($rootScope.searchSettings.useDailyPricing == 1 && price_data.daily && price_data.daily > 0) {
                var dailyPrice = price_data.daily;
                if (diffDays >= 7 && diffDays < 30 && price_data.weekly > 0) {
                    dailyPrice = price_data.weekly / 7
                }
                if (diffDays >= 30 && price_data.monthly > 0) {
                    dailyPrice = price_data.monthly / 30
                }
                priceText = $filter("currency")(dailyPrice, undefined, decimals)
            } else if ($rootScope.searchSettings.useWeeklyPricing == 1 && price_data.weekly && price_data.weekly > 0) {
                priceText = $filter("currency")(price_data.weekly, undefined, decimals)
            } else if ($rootScope.searchSettings.useMonthlyPricing == 1 && price_data.monthly && price_data.monthly > 0) {
                priceText = $filter("currency")(price_data.monthly, undefined, decimals)
            }
            return priceText
        };
        $scope.getDailyPrice = function(price_data) {
            var price = 0;
            var diffDays = 0;
            if ($scope.search) {
                var oneDay = 24 * 60 * 60 * 1e3;
                var checkin = new Date($scope.search.start_date);
                var checkout = new Date($scope.search.end_date);
                diffDays = Math.round(Math.abs((checkin.getTime() - checkout.getTime()) / oneDay))
            }
            if ($rootScope.searchSettings.useDailyPricing == 1 && price_data.daily && price_data.daily > 0) {
                var dailyPrice = price_data.daily;
                if (diffDays >= 7 && diffDays < 30 && price_data.weekly > 0) {
                    dailyPrice = price_data.weekly / 7
                }
                if (diffDays >= 30 && price_data.monthly > 0) {
                    dailyPrice = price_data.monthly / 30
                }
                price = dailyPrice
            } else if ($rootScope.searchSettings.useWeeklyPricing == 1 && price_data.weekly && price_data.weekly > 0) {
                price = price_data.weekly
            } else if ($rootScope.searchSettings.useMonthlyPricing == 1 && price_data.monthly && price_data.monthly > 0) {
                price = price_data.monthly
            }
            return price
        };
        $scope.getPrependTex = function(price_data) {
            var prependText = "";
            if ($rootScope.searchSettings.useDailyPricing == 1 && price_data.daily && price_data.daily > 0) {
                prependText = $rootScope.searchSettings.dailyPrepend
            } else if ($rootScope.searchSettings.useWeeklyPricing == 1 && price_data.weekly && price_data.weekly > 0) {
                prependText = $rootScope.searchSettings.weeklyPrepend
            } else if ($rootScope.searchSettings.useMonthlyPricing == 1 && price_data.monthly && price_data.monthly > 0) {
                prependText = $rootScope.searchSettings.monthlyPrepend
            }
            return prependText
        };
        $scope.getAppendTex = function(price_data) {
            var appendText = "";
            if ($rootScope.searchSettings.useDailyPricing == 1 && price_data.daily && price_data.daily > 0) {
                appendText = $rootScope.searchSettings.dailyAppend
            } else if ($rootScope.searchSettings.useWeeklyPricing == 1 && price_data.weekly && price_data.weekly > 0) {
                appendText = $rootScope.searchSettings.weeklyAppend
            } else if ($rootScope.searchSettings.useMonthlyPricing == 1 && price_data.monthly && price_data.monthly > 0) {
                appendText = $rootScope.searchSettings.monthlyAppend
            }
            return appendText
        };
        $scope.loadMarker = function(markerData) {
            var myLatlng = new google.maps.LatLng(markerData.latitude, markerData.longitude);
            var price = "";
            if ($scope.method == "GetPropertyAvailabilityWithRatesWordPress") {
                price = $filter("currency")(markerData.price, undefined, 0)
            } else {
                var price = "N/A";
                if ($rootScope.searchSettings.useDailyPricing == 1 && markerData.price.daily && markerData.price.daily > 0) {
                    price = $filter("currency")(markerData.price.daily, undefined, 0)
                } else if ($rootScope.searchSettings.useWeeklyPricing == 1 && markerData.price.weekly && markerData.price.weekly > 0) {
                    price = $filter("currency")(markerData.price.weekly, undefined, 0)
                } else if ($rootScope.searchSettings.useMonthlyPricing == 1 && markerData.price.monthly && markerData.price.monthly > 0) {
                    price = $filter("currency")(markerData.price.monthly, undefined, 0)
                }
            }
            var pin = $templateCache.get("pin.html");
            pin = pin.replace("%price%", price);
            var marker = new RichMarker({
                id: markerData.id,
                map: map,
                title: markerData.name,
                position: myLatlng,
                shadow: "none",
                content: pin
            });
            infowindow = new google.maps.InfoWindow;
            var start_date = "";
            var end_date = "";
            var occupants = "";
            var occupants_small = "";
            var pets = "";
            if ($scope.search) {
                start_date = $scope.search.start_date;
                end_date = $scope.search.end_date;
                occupants = $scope.search.occupants;
                occupants_small = $scope.search.occupants_small;
                pets = $scope.search.pets
            }
            var url = $scope.goToProperty(markerData.seo_page_name, start_date, end_date, occupants, occupants_small, pets);
            google.maps.event.addListener(marker, "click", function(marker) {
                return function() {
                    var content = $templateCache.get("marker.html");
                    content = content.replace(/%name%/g, markerData.name);
                    content = content.replace(/%url%/g, url);
                    content = content.replace(/%image%/g, markerData.image);
                    content = content.replace(/%beds%/g, markerData.beds);
                    content = content.replace(/%baths%/g, markerData.baths);
                    content = content.replace(/%guests%/g, markerData.guests);
                    infowindow.setContent(content);
                    infowindow.open(map, marker)
                }
            }(marker));
            arrMarkers.push(marker)
        };
        $scope.normalIcon = function() {
            return {
                url: "http://1.bp.blogspot.com/_GZzKwf6g1o8/S6xwK6CSghI/AAAAAAAAA98/_iA3r4Ehclk/s1600/marker-green.png"
            }
        };
        $scope.highlightedIcon = function() {
            return {
                url: "http://steeplemedia.com/images/markers/markerGreen.png"
            }
        };
        $scope.highlightIcon = function(unit_id) {
            angular.forEach(arrMarkers, function(item) {
                if (item.id == unit_id) {
                    if (item.getContent()) {
                        item.setContent(item.getContent().replace("arrow_box", "arrow_box_hover"))
                    }
                }
            })
        };
        $scope.restoreIcon = function(unit_id) {
            angular.forEach(arrMarkers, function(item) {
                if (item.id == unit_id) {
                    if (item.getContent()) {
                        item.setContent(item.getContent().replace("arrow_box_hover", "arrow_box"))
                    }
                }
            })
        };
        $scope.setModalCheckin = function(date) {
            $scope.modal_checkin = date
        };
        $scope.resetCalendarPopup = function() {
            $scope.showDays = true;
            $scope.modal_total_reservation = 0;
            $scope.modal_nights = ""
        };
        $scope.setNights = function() {
            var frm = new Date($scope.modal_checkin);
            nts = parseInt($scope.modal_nights);
            var the_year = frm.getFullYear();
            if (the_year < 2e3) the_year = 2e3 + the_year % 100;
            var to = new Date(the_year, frm.getMonth(), frm.getDate() + nts);
            $scope.modal_checkout = to.format("mm/dd/yyyy");
            var booking = {
                checkin: frm.format("mm/dd/yyyy"),
                checkout: to.format("mm/dd/yyyy"),
                unit_id: $scope.propertyId,
                occupants: 1,
                occupants_small: 0,
                pets: 0
            };
            jQuery("#modal_end_date").datepicker("option", "minDate", frm);
            $scope.modal_checkin = frm.format("mm/dd/yyyy");
            $scope.modal_checkout = to.format("mm/dd/yyyy");
            $scope.updatePricePopupCalendar()
        };
        $scope.updatePricePopupCalendar = function() {
            run_waitMe("#myModal .modal-content", "bounce");
            Alert.clear();
            rpapi.getWithParams("VerifyPropertyAvailability", {
                unit_id: $scope.propertyId,
                startdate: $scope.modal_checkin,
                enddate: $scope.modal_checkout,
                occupants: $scope.modal_occupants,
                occupants_small: $scope.modal_occupants_small,
                pets: $scope.modal_pets
            }).success(function(obj) {
                if (obj.status) {
                    $scope.reservation_days = [];
                    $scope.total_reservation = 0;
                    $scope.first_day_price = 0;
                    $scope.rent = 0;
                    $scope.taxes = 0;
                    Alert.add(Alert.errorType, obj.status.description);
                    hide_waitMe("#myModal .modal-content")
                } else {
                    rpapi.getWithParams("GetPreReservationPrice", {
                        unit_id: $scope.propertyId,
                        startdate: $scope.modal_checkin,
                        enddate: $scope.modal_checkout,
                        occupants: $scope.modal_occupants,
                        occupants_small: $scope.modal_occupants_small,
                        pets: $scope.modal_pets
                    }).success(function(obj) {
                        if (obj.data != undefined) {
                            $scope.showDays = false;
                            $scope.modal_total_reservation = obj.data.total;
                            $scope.modal_rent = obj.data.price;
                            $scope.modal_taxes = obj.data.taxes;
                            $scope.modal_coupon_discount = obj.data.coupon_discount;
                            $scope.modal_reservation_days = obj.data.reservation_days;
                            $scope.modal_security_deposits = obj.data.security_deposits;
                            $scope.modal_first_day_price = obj.data.first_day_price;
                            $scope.modal_required_fees = obj.data.required_fees;
                            $scope.modal_taxes_details = obj.data.taxes_details;
                            if (obj.data.reservation_days.date != undefined) {
                                $scope.modal_days = false
                            } else {
                                $scope.modal_days = true
                            }
                            hide_waitMe("#myModal .modal-content")
                        }
                    })
                }
            })
        };
        $scope.setCheckoutDate = function(date) {
            if ($scope.book.checkout) {
                $scope.book.checkout = date.format("mm/dd/yyyy")
            }
        };
        $scope.resetInquiry = function(inquiry) {
            $scope.inquiry.unit_id = 0;
            $scope.inquiry.startDate = "";
            $scope.inquiry.endDate = "";
            $scope.inquiry.email = "";
            $scope.inquiry.occupants = "";
            $scope.inquiry.occupantsSmall = "";
            $scope.inquiry.first_name = "";
            $scope.inquiry.last_name = "";
            $scope.inquiry.phone = "";
            $scope.inquiry.message = "";
            $scope.resortpro_inquiry.$setPristine();
            $scope.resortpro_inquiry.$setUntouched();
            $scope.alerts = []
        };
        $scope.resetFavorites = function(favorites) {
            $scope.favorites.unit_id = 0;
            $scope.favorites.startDate = "";
            $scope.favorites.endDate = "";
            $scope.favorites.email = "";
            $scope.favorites.occupants = "";
            $scope.favorites.occupantsSmall = "";
            $scope.favorites.first_name = "";
            $scope.favorites.last_name = "";
            $scope.favorites.phone = "";
            $scope.favorites.message = "";
            $scope.resortpro_save_fav.$setPristine();
            $scope.resortpro_save_fav.$setUntouched()
        };
        $scope.setUnitForInquiry = function(unit_id) {
            if (typeof $scope.inquiry == "undefined") {
                $scope.inquiry = {}
            }
            $scope.inquiry.unit_id = unit_id
        };
        $scope.validateFavorites = function(favorites) {
            var error = false;
            if ($scope.resortpro_save_fav.favorites_email.$error.required && $scope.resortpro_save_fav.favorites_phone.$error.required) {
                error = true
            }
            if ($scope.resortpro_save_fav.favorites_first_name.$error.required || $scope.resortpro_save_fav.favorites_last_name.$error.required || $scope.resortpro_save_fav.favorites_startdate.$error.required || $scope.resortpro_save_fav.favorites_enddate.$error.required) {
                error = true
            }
            if (!error) {
                $scope.saveFavorites(favorites)
            }
        };
        $scope.validateInquiry = function(inquiry, popup) {
            var error = false;
            if ($scope.resortpro_inquiry.inquiry_email.$error.required && $scope.resortpro_inquiry.inquiry_phone.$error.required) {
                error = true
            }
            if ($scope.resortpro_inquiry.inquiry_first_name.$error.required || $scope.resortpro_inquiry.inquiry_last_name.$error.required || $scope.resortpro_inquiry.inquiry_startdate.$error.required || $scope.resortpro_inquiry.inquiry_enddate.$error.required) {
                error = true
            }
            if (!error) {
                $scope.propertyInquiry(inquiry, popup)
            }
        };
        $scope.loadFavorites = function() {
            $scope.loading = true;
            var fav_ids = $cookies.getObject("streamline-favorites");
            if (fav_ids) {
                var params = {
                    include_units: fav_ids.join()
                };
                rpapi.getWithParams("GetPropertyListWordPress", params).success(function(obj) {
                    $scope.loading = false;
                    if (obj.data.property.id) {
                        $scope.favoritesObj = [];
                        $scope.favoritesObj.push(obj.data.property)
                    } else {
                        $scope.favoritesObj = Object.keys(obj.data.property).map(function(key) {
                            return obj.data.property[key]
                        })
                    }
                })
            } else {
                $scope.favoritesObj = []
            }
        };
        $scope.checkFavorites = function(property) {
            var favorites = $cookies.getObject("streamline-favorites");
            var found = false;
            if (favorites) {
                angular.forEach(favorites, function(value, key) {
                    if (property.id == value) {
                        found = true
                    }
                })
            }
            return found
        };
        $scope.removeFromFavorites = function(property) {
            if (confirm("Are you sure you want to remove unit " + property.name + " " +"from Favourites")) {
                var favorites = $cookies.getObject("streamline-favorites");
                if (favorites) {
                    angular.forEach(favorites, function(value, key) {
                        if (property.id == value) {
                            favorites.splice(key, 1)
                        }
                    });
                    angular.forEach($scope.favoritesObj, function(prop, key) {
                        if (property.id == prop.id) {
                            $scope.favoritesObj.splice(key, 1)
                        }
                    });
                    if (favorites.length == 0) {
                        $cookies.remove("streamline-favorites", {
                            path: "/"
                        });
                        $scope.wishlist = []
                    } else {
                        $scope.wishlist = favorites;
                        $cookies.putObject("streamline-favorites", favorites, {
                            path: "/"
                        })
                    }
                }
            }
        };
        $scope.addToFavorites = function(property) {
            var favorites = $cookies.getObject("streamline-favorites");
            if (favorites) {
                var foundUnit = false;
                angular.forEach(favorites, function(value, key) {
                    if (property.id == value) {
                        foundUnit = true
                    }
                });
                favorites.push(property.id)
            } else {
                favorites = [];
                favorites.push(property.id)
            }
            var now = new Date;
            now.setDate(now.getDate() + 30);
            $scope.wishlist = favorites;
            $cookies.putObject("streamline-favorites", favorites, {
                path: "/",
                expires: now
            })
        };
        $scope.changeToListView = function() {
        	jQuery("body").removeClass("headerfixed");
        	jQuery('.filter-btn').addClass("d-md-block");
        	jQuery(".filter-menu-show").removeClass("d-none");
            $scope.enabledlistview = "true";
            $scope.currentView = "listview";
            $scope.view = "listview";
            $scope.showload = true;
            var now = new Date();
            $scope.setCookie("view", "listview", 1);
            jQuery('.loadmore').show();
            jQuery(".listings_wrapper_box").hide();
            jQuery(".map-container-wrapper").hide();
            jQuery(".list-container-wrapper").show();
            jQuery('.filtersec').removeClass("d-none");
            jQuery(".show_list_name").show();
            jQuery(".show_grid_name").hide();
            jQuery(".show_map_name").hide();
            jQuery(".streamline-pagination-wrapper").show()
        };
        $scope.changeToGridView = function() {
        	jQuery("body").removeClass("headerfixed");
        	jQuery('.filter-btn').addClass("d-md-block");
        	jQuery(".filter-menu-show").removeClass("d-none");
            $scope.enabledlistview = "false";
            $scope.currentView = "gridview";
            $scope.view = "gridview";
            $scope.showload = true;
            var now = new Date();
            $scope.setCookie("view", "gridview", 1);
            jQuery('.loadmore').show();
            jQuery(".listings_wrapper_box").show();
            jQuery(".list-container-wrapper").hide();
            jQuery(".map-container-wrapper").hide();
            jQuery('.filtersec').removeClass("d-none");
            jQuery(".show_list_name").hide();
            jQuery(".show_map_name").hide();
            jQuery(".show_grid_name").show();
            jQuery(".streamline-pagination-wrapper").show()
        };
        $scope.changeToMapView = function() {
            $scope.enabledlistview = "false";
            $scope.currentView = "mapview";
            $scope.view = "mapview";
            $scope.showload = false;
            jQuery('.filter-btn').removeClass("d-md-block");
            jQuery(".filter-menu-show").addClass("d-none");
            var now = new Date();
            $scope.setCookie("view", "mapview", 1);
            jQuery('.loadmore').hide();
            jQuery('.filtersec').addClass("d-none");
            jQuery(".map-container-wrapper").show();
            jQuery(".listings_wrapper_box").hide();
            jQuery(".list-container-wrapper").hide();
            jQuery(".show_list_name").hide();
            jQuery(".show_grid_name").hide();
            jQuery(".show_map_name").show();
            jQuery(".streamline-pagination-wrapper").hide();
            window.dispatchEvent(new Event('resize'));
        };
        $scope.loadRecents = function() {
            $scope.load = true;
            var recent_ids = $cookies.getObject("streamline-recents");
            var params = {
                include_units: recent_ids.join()
            };
            rpapi.getWithParams("GetPropertyListWordPress", params).success(function(obj) {
                $scope.load = false;
                if (obj.data.property) {
                    if (obj.data.property.id) {
                        $scope.recentsObj = [];
                        $scope.recentsObj.push(obj.data.property)
                    } else {
                        $scope.recentsObj = Object.keys(obj.data.property).map(function(key) {
                            return obj.data.property[key]
                        })
                    }
                }
            })
        };
        $scope.addToRecents = function(property) {
            var recents = $cookies.getObject("streamline-recents");
            if (recents) {
                var foundUnit = false;
                angular.forEach(recents, function(value, key) {
                    if (property.id == value) {
                        foundUnit = true
                    }
                });
                if (!foundUnit) {
                    recents.unshift(property.id)
                }
                if (recents.length > 3) {
                    recents.pop()
                }
            } else {
                recents = [];
                recents.push(property.id)
            }
            var now = new Date;
            now.setDate(now.getDate() + 30);
            $scope.recentProp = recents;
            $cookies.putObject("streamline-recents", recents, {
                path: "/",
                expires: now
            })
        };
        $scope.propertyInquiry = function(inquiry, popup) {
            run_waitMe("#myModal2 .modal-dialog, #inquiry_box", "bounce", "Please wait, sending inquiry...");
            setTimeout(function() {
                var params = {
                    unit_id: inquiry.unit_id,
                    not_blocked_request: "yes",
                    startdate: inquiry.startDate,
                    enddate: inquiry.endDate,
                    occupants: inquiry.occupants,
                    occupants_small: inquiry.occupantsSmall,
                    first_name: inquiry.first_name,
                    last_name: inquiry.last_name,
                    email: inquiry.email,
                    mobile_phone: inquiry.phone,
                    extra_notes: inquiry.message,
                    pets: inquiry.pets,
                    disable_minimal_days: "yes"
                };
                if ($rootScope.bookingSettings.hearedAboutId && $rootScope.bookingSettings.hearedAboutId > 0) {
                    params["hear_about_id"] = $rootScope.bookingSettings.hearedAboutId
                }
                rpapi.getWithParams("MakeReservation", params).success(function(obj) {
                    hide_waitMe("#myModal2 .modal-dialog, #inquiry_box");
                    if (obj.status) {
                        Alert.add(Alert.errorType, obj.status.description)
                    } else {
                        $scope.resetInquiry();
                        if ($rootScope.bookingSettings && $rootScope.bookingSettings.inquiryThankUrl != "") {
                            $window.location.href = $rootScope.bookingSettings.inquiryThankUrl
                        } else {
                            Alert.add(Alert.successType, $rootScope.bookingSettings.inquiryThankMsg);
                            alert("Thanks for your enquiry! Your enquiry has been sent");
                            jQuery("#resortpro_btn_inquiry").prop("disabled", true);
                            if (popup) {
                                jQuery("#myModal2").modal("hide")
                            }
                        }
                    }
                })
            }, 500);
            return false
        };
        $scope.saveFavorites = function(favorites) {
            run_waitMe("#modalFav .modal-dialog, #inquiry_box", "bounce", "Please wait, saving favorites...");
            setTimeout(function() {
                var unit_id = 0;
                var str_favorites = "";
                angular.forEach($scope.favoritesObj, function(prop, key) {
                    if (unit_id == 0) {
                        unit_id = prop.id
                    }
                    str_favorites += prop.name + ",\n\r"
                });
                var params = {
                    unit_id: unit_id,
                    not_blocked_request: "yes",
                    startdate: favorites.startDate,
                    enddate: favorites.endDate,
                    occupants: 1,
                    occupants_small: 0,
                    first_name: favorites.first_name,
                    last_name: favorites.last_name,
                    email: favorites.email,
                    favorites: favorites.phone,
                    extra_notes: "Comments: " + favorites.message + ". Favorite Units: \n\r" + str_favorites,
                    pets: 0,
                    disable_minimal_days: "yes"
                };
                rpapi.getWithParams("MakeReservation", params).success(function(obj) {
                    hide_waitMe("#modalFav .modal-dialog, #inquiry_box");
                    if (obj.status) {
                        Alert.add(Alert.errorType, obj.status.description)
                    } else {
                        $scope.resetFavorites();
                        Alert.add(Alert.successType, "Favorites saved successfully");
                        setTimeout(function() {
                            jQuery("#modalFav").modal("hide")
                        }, 3e3)
                    }
                })
            }, 500);
            return false
        };
        $scope.loadCompare = function() {
            $scope.loading = true;
            var compare_ids = $cookies.getObject("streamline-compare-units");
            if (compare_ids) {
                var params = {
                    include_units: compare_ids.join(),
                    additional_variables: 1
                };
                var cmp_amenity = {};
                rpapi.getWithParams("GetPropertyListWordPress", params).success(function(obj) {
                    $scope.loading = false;
                    angular.forEach(obj.data.property, function(value, property) {
                        if (value.unit_amenities !== null) {
                            angular.forEach(value.unit_amenities.amenity, function(amenity, key) {
                                if ($scope.compareAmenities != "undefined" && amenity.amenity_show_on_website == "yes") {
                                    if (property === 0) {
                                        cmp_amenity[amenity.amenity_name] = [{
                                            name: amenity.amenity_name
                                        }, {
                                            prop1: 1
                                        }, {
                                            prop2: 0
                                        }, {
                                            prop3: 0
                                        }]
                                    }
                                    if (property !== 0) {
                                        if (amenity.amenity_name in cmp_amenity) {
                                            if (property === 1) {
                                                cmp_amenity[amenity.amenity_name][2].prop2 = 1
                                            } else {
                                                cmp_amenity[amenity.amenity_name][3].prop3 = 1
                                            }
                                        } else {
                                            if (property === 1) {
                                                cmp_amenity[amenity.amenity_name] = [{
                                                    name: amenity.amenity_name
                                                }, {
                                                    prop1: 0
                                                }, {
                                                    prop2: 1
                                                }, {
                                                    prop3: 0
                                                }]
                                            } else {
                                                cmp_amenity[amenity.amenity_name] = [{
                                                    name: amenity.amenity_name
                                                }, {
                                                    prop1: 0
                                                }, {
                                                    prop2: 0
                                                }, {
                                                    prop3: 1
                                                }]
                                            }
                                        }
                                    }
                                }
                            })
                        }
                    });
                    if (obj.data.property.id) {
                        $scope.compareObj = [];
                        $scope.compareObj.push(obj.data.property)
                    } else {
                        $scope.compareObj = Object.keys(obj.data.property).map(function(key) {
                            obj.data.property[key].compareAmenities = cmp_amenity;
                            return obj.data.property[key]
                        })
                    }
                })
            } else {
                return false
            }
        };
        $scope.checkCompare = function(property) {
            var compare = $cookies.getObject("streamline-compare-units");
            var found = false;
            if (compare) {
                angular.forEach(compare, function(value, key) {
                    if (property.id == value) {
                        found = true
                    }
                })
            }
            return found
        };
        $scope.removeFromCompare = function(property) {
            var compare = $cookies.getObject("streamline-compare-units");
            if (compare) {
                angular.forEach(compare, function(value, key) {
                    if (property.id == value) {
                        compare.splice(key, 1)
                    }
                });
                if (compare.length == 0) {
                    $cookies.remove("streamline-compare-units", {
                        path: "/"
                    })
                } else {
                    $cookies.putObject("streamline-compare-units", compare, {
                        path: "/"
                    })
                }
            }
            if (window.location.pathname == "/compare/") {
                if (compare.length == 2) {
                    $window.location.href = "/compare"
                }
                if (compare.length == 1) {
                    $window.location.href = "/search-results"
                }
            }
        };
        $scope.addToCompare = function(property) {
            var compare = $cookies.getObject("streamline-compare-units");
            if (compare) {
                var foundUnit = false;
                angular.forEach(compare, function(value, key) {
                    if (property.id == value) {
                        foundUnit = true
                    }
                    if (compare.length >= 3) {
                        compare.splice(key, 1)
                    }
                });
                compare.push(property.id)
            } else {
                compare = [];
                compare.push(property.id)
            }
            var now = new Date;
            now.setDate(now.getDate() + 30);
            $cookies.putObject("streamline-compare-units", compare, {
                path: "/",
                expires: now
            });
            if (compare.length == 3) {
                $window.location.href = "/compare"
            }
        };

        $scope.editSearch = function(){
            jQuery("#search_start_date_single").val(jQuery('.checkinspan').html());
            jQuery("#search_end_date_single").val(jQuery('.checkoutspan').html());
            jQuery("#search_start_date_single").trigger("input");
            jQuery("#search_end_date_single").trigger("input");
            jQuery('html, body').animate({
                scrollTop: jQuery("#sidebar").offset().top-150
            });
        }

        $scope.readyToCompare = function(property) {
            var compare = $cookies.getObject("streamline-compare-units");
            var comparing = 3;
            if (compare) {
                if (compare.length == 1) comparing = 2;
                if (compare.length == 2) comparing = 1;
                if (compare.length == 3) {
                    comparing = 0
                }
            }
            return comparing
        };
        $scope.clearCompare = function(property) {
            $cookies.remove("streamline-compare-units", {
                path: "/"
            })
        };
        $scope.isMobile = function() {
            if (window.innerWidth <= 600 && window.innerHeight <= 900) {
                return true
            } else {
                return false
            }
        };
        $scope.$watch($scope.isMobile, function() {}, true);
        angular.element($window).bind("orientationchange", function() {
            $scope.$apply()
        })
    }])
})();
(function() {
    var app = angular.module("resortpro.services", []);
    app.service("streamlineService", function(rpapi, $q) {
        this.getPreReservationPrice = function(params) {
            return rpapi.getWithParams("GetPreReservationPrice", params).then(function(response) {
                return response.data
            }, function(error) {
                return error
            })
        };
        this.getReservationPrice = function(params) {
            return rpapi.getWithParams("GetReservationPrice", params).then(function(response) {
                return response.data
            }, function(error) {
                return error
            })
        };
        this.getReservationInfo = function(confirmation_id) {
            return rpapi.getWithParams("GetReservationPrice", {
                confirmation_id: confirmation_id
            }).then(function(response) {
                return response.data
            }, function(error) {
                return error
            })
        };
        this.verifyPropertyAvailability = function(startdate, enddate, unit_id, occupants, occupants_small, pets, use_room_type) {
            return rpapi.getWithParams("VerifyPropertyAvailability", {
                unit_id: unit_id,
                startdate: startdate,
                enddate: enddate,
                occupants: occupants,
                occupants_small: occupants_small,
                pets: pets,
                use_room_type_logic: use_room_type
            }).then(function(response) {
                return response.data
            }, function(error) {
                return error
            })
        };
        this.getPropertyInfo = function(unit_id) {
            return rpapi.getWithParams("GetPropertyInfo", {
                unit_id: unit_id
            }).then(function(obj) {
                var response = obj.data;
                return response
            }, function(error) {
                return error
            })
        };
        this.getPropertyRoomsDetailsRawData = function(unit_id) {
            return rpapi.getWithParams("GetPropertyRoomsDetailsRawData", {
                unit_id: unit_id
            }).then(function(obj) {
                var result = [];
                var response = obj.data.data;
                if (response) {
                    if (response.roomsdetails.name) {
                        result.push(response.roomsdetails)
                    } else {
                        result = response.roomsdetails
                    }
                }
                return result
            }, function(error) {
                return error
            })
        };
        this.getPropertyRatesRawData = function(unit_id, use_yielding) {
            return rpapi.getWithParams("GetPropertyRatesRawData", {
                unit_id: unit_id,
                use_yielding: use_yielding
            }).then(function(obj) {
                var result = [];
                var response = obj.data.data;
                if (response) {
                    if (response.rates.period_begin) {
                        result.push(response.rates)
                    } else {
                        result = response.rates
                    }
                }
                return result
            }, function(error) {
                return error
            })
        };
        this.getPropertyFeedbacks = function(unit_id) {
            return rpapi.getWithParams("GetPropertyFeedbacks", {
                unit_id: unit_id
            }).then(function(obj) {
                var result = [];
                var response = obj.data.data;
                if (response) {
                    if (response.feedbacks.guest_name) {
                        result.push(response.feedbacks)
                    } else {
                        result = response.feedbacks
                    }
                }
                return result
            }, function(error) {
                return error
            })
        };
        this.getPropertyAvailabilityCalendarRawData = function(unit_id) {
            return rpapi.getWithParams("GetPropertyAvailabilityCalendarRawData", {
                unit_id: unit_id
            }).then(function(obj) {
                var result = [];
                var response = obj.data.data;
                if (response) {
                    if (response.blocked_period.startdate) {
                        result.push(response.blocked_period)
                    } else {
                        result = response.blocked_period
                    }
                }
                return result
            }, function(error) {
                return error
            })
        };
        this.makeReservation = function(params) {
            return rpapi.getWithParams("MakeReservation", params).then(function(obj) {
                var result = [];
                var response = obj.data;
                return response
            }, function(error) {
                return error
            })
        }
    });
    app.factory("beforeUnload", function($rootScope, $window) {
        $window.onbeforeunload = function(e) {
            var confirmation = {};
            var event = $rootScope.$broadcast("onBeforeUnload", confirmation);
            if (event.defaultPrevented) {
                return confirmation.message
            }
        };
        $window.onunload = function() {
            $rootScope.$broadcast("onUnload")
        };
        return {}
    }).run(function(beforeUnload) {})
})();
(function() {
    var app = angular.module("resortpro.services");
    app.service("Alert", function($rootScope, $timeout) {
        $rootScope.alerts = [];
        this.clear = function() {
            $rootScope.alerts = []
        };
        this.add = function(type, message) {
            var alert = {
                type: type,
                message: message,
                timestamp: Date.now()
            };
            $rootScope.alerts.push(alert)
        };
        this.errorType = "danger", this.errorMessage = "Sorry, there was an error while processing your request.";
        this.successType = "success", this.successMessage = "Saved successfully.";
        this.infoType = "info", this.successMessage = "Sent successfully."
    })
})();
(function() {
    var app = angular.module("resortpro.services");
    app.factory("rpapi", function($http, $rootScope) {
        return {
            get: function(method) {
                var request = {};
                var params = {};
                var use_tokens = false;
                if ($rootScope.companyCode) {
                    params.company_code = $rootScope.companyCode
                } else {
                    use_tokens = true
                }
                request.methodName = method;
                request.params = params;
                var _obj = JSON.stringify(request);
                $http.defaults.useXDomain = true;
                if (use_tokens) {
                    var data = {
                        action: "streamlinecore-api-request",
                        params: request
                    };
                    return $http({
                        method: "POST",
                        headers: {
                            "Content-type": "application/json"
                        },
                        url: streamlinecoreConfig.ajaxUrl,
                        params: data
                    })
                } else {
                    return $http.post($rootScope.APIServer, JSON.stringify(request))
                }
            },
            getWithParams: function(method, params) {
                var request = {};
                var use_tokens = false;
                request.methodName = method;
                if ($rootScope.companyCode) {
                    params.company_code = $rootScope.companyCode
                } else {
                    use_tokens = true
                }
                request.params = params;
                var _obj = JSON.stringify(request);
                $http.defaults.useXDomain = true;
                delete $http.defaults.headers.common["X-Requested-With"];
                if (use_tokens) {
                    var data = {
                        action: "streamlinecore-api-request",
                        params: request
                    };
                    return $http({
                        method: "POST",
                        headers: {
                            "Content-type": "application/json"
                        },
                        url: streamlinecoreConfig.ajaxUrl,
                        params: data
                    })
                } else {
                    return $http.post($rootScope.APIServer, JSON.stringify(request))
                }
            },
            getWpActionWithParams: function(action, params) {
                var data = {
                    action: action
                };
                for (var propertyName in params) {
                    data[propertyName] = params[propertyName]
                }
                return $http({
                    method: "POST",
                    headers: {
                        "Content-type": "application/json"
                    },
                    url: streamlinecoreConfig.ajaxUrl,
                    params: data
                })
            }
        }
    });
    app.factory("rpuri", function($http, $rootScope) {
        return {
            getQueryStringParam: function(sParam) {
                var sPageUrl = window.location.search.substring(1);
                var sURLVariables = sPageUrl.split("&");
                for (var i = 0; i < sURLVariables.length; i++) {
                    var sParameterName = sURLVariables[i].split("=");
                    if (sParameterName[0] == sParam) {
                        return sParameterName[1]
                    }
                }
            }
        }
    })
})();